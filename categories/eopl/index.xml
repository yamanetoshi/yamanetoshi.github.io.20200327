<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eopl on /var/log/messages</title>
    <link>https://weblog.metacircular-evaluator.org/categories/eopl/</link>
    <description>Recent content in Eopl on /var/log/messages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 01 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://weblog.metacircular-evaluator.org/categories/eopl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EoPL の Exercise 2.24</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/12/01/eopl-ex-2-24/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/12/01/eopl-ex-2-24/</guid>
      <description>&lt;p&gt;これ、意外にムズいな。ちょい整理。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extend-subst で symbol を term に置換する subst なオブジェクトが戻される&lt;/li&gt;
&lt;li&gt;var-term が term な何かと置換 (constant-ter または app-term という理解)&lt;/li&gt;
&lt;li&gt;extend が戻す手続きは基本的に sym と i が eqv? なら t を戻せば良いの?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.24</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/27/eopl-ex-2-23/</link>
      <pubDate>Wed, 27 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/27/eopl-ex-2-23/</guid>
      <description>&lt;p&gt;2.1.2 の subst あたりを復習。subst の定義が以下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define subst
  (lambda (new old slist)
    (if (null? slist)
        &#39;()
        (cons
          (subst-in-symbol-expression new old (car slist))
          (subst new old (cdr subst))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>昨晩</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/26/eopl-ex-2-23/</link>
      <pubDate>Tue, 26 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/26/eopl-ex-2-23/</guid>
      <description>&lt;p&gt;ちょろっと直した。以下、差分。# rib ではなくてリストになっていたので。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.23</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/25/eopl-ex-2-23/</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/25/eopl-ex-2-23/</guid>
      <description>&lt;p&gt;ゲンジツトウヒ気味に着手。必要な手続きは以下なのかどうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;empty-env&lt;/li&gt;
&lt;li&gt;extend-env&lt;/li&gt;
&lt;li&gt;apply-env&lt;/li&gt;
&lt;li&gt;list-find-position&lt;/li&gt;
&lt;li&gt;list-index&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;single pair of ribs が前提なのであれば (sim val) なリストのリストで良いのか。これで作るとして試験を先に考えます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.22</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/18/eopl-ex-2-22/</link>
      <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/18/eopl-ex-2-22/</guid>
      <description>&lt;p&gt;なんとなくやってみたらなんとなくできた。流石☆一つ。試験とか Ex.2.20 のソレをまんま流用してるので微妙です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.21</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/16/eopl-ex-2-21/</link>
      <pubDate>Sat, 16 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/16/eopl-ex-2-21/</guid>
      <description>これはなかなかにシュールなリストだな。 gosh&amp;gt; (cons (list &#39;() &#39;()) &#39;()) ((() ())) 時間使ってきちんと読みたいのですが、今日はというかこの週末は無理らしい。</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.19</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/15/eopl-ex-2-19/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/15/eopl-ex-2-19/</guid>
      <description>&lt;p&gt;微妙にハマった。つうか試験が微妙だったんですが 2.14 って本当に終わったのだろうかと思うなど。
手続き定義の本体と試験を以下に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.20</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/15/eopl-ex-2-20/</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/15/eopl-ex-2-20/</guid>
      <description>&lt;p&gt;なんかゲンジツトウヒ気味に手を付けてみたらさくっとできたので。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の 2.3.2 と 2.3.3 控え</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/14/eopl-note/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/14/eopl-note/</guid>
      <description>&lt;p&gt;_環境_を操作する実装について。纏めるのがやや微妙。&lt;/p&gt;

&lt;p&gt;interface は決まってますが、実装として&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;constructor は手続きオブジェクトを戻して apply-* ではその手続きを eval する方式&lt;/li&gt;
&lt;li&gt;constructor は abstract syntax tree を戻して apply-* ではその型によって必要な手続きを適用する方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という形になってます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.18</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/14/eopl-ex-2-18/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/14/eopl-ex-2-18/</guid>
      <description>&lt;p&gt;2.3.3 節で empty-env と extend-env が environment という abstract syntax で抽象化されてしまいます。これは凄い。実際に評価されるのは apply-env の時点、という事になってしまいました。こうなれば、と思ってたところだったので笑いました。&lt;/p&gt;

&lt;p&gt;で、こうした事で中身の検査ができるようになってます。練習問題はその実装をせよ、という設問になっております。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.17</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/13/eopl-ex-2-17/</link>
      <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/13/eopl-ex-2-17/</guid>
      <description>&lt;p&gt;i/f を探索するだけ、と値の取得、という意味付けをすれば良いのかどうか。例えば以下?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define empty-env
  (lambda ()
    (lambda (sym search)
      (if search
          #f
          (eopl:error &#39;apply-env &amp;quot;No binding for ~s&amp;quot; sym)))))

(define extend-env
  (lambda (syms valus env)
    (lambda (sym search)
      (let ((pos (list-find-position sym syms)))
        (if (number? pos)
          (if search
            #t
            (list-ref vals pos))
          (apply-env env sym))))))

(define apply-env
  (lambda (env sym)
    (env sym #f)))

(define has-association?
  (lambda (env sym)
    (env sym #t)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;試験書けるのかな。とりあえず試験から書いてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.16</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/12/eopl-ex-2-16/</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/12/eopl-ex-2-16/</guid>
      <description>&lt;p&gt;list-find-position 使え、ということであれば&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list-find-position が #f を戻す場合、その場所から以降末端まで sym は無い&lt;/li&gt;
&lt;li&gt;最初の呼び出しで #f が戻ったら #f で良い&lt;/li&gt;
&lt;li&gt;list-find-position の戻りが number? な場合は位置を覚えといて再度 list-find-position すりゃ良いのかどうか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.15</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/10/eopl-ex-2-15/</link>
      <pubDate>Sun, 10 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/10/eopl-ex-2-15/</guid>
      <description>&lt;p&gt;考えかたてきには&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stack は手続きオブジェクト&lt;/li&gt;
&lt;li&gt;push で extend すれば良い

&lt;ul&gt;
&lt;li&gt;extend は stack を戻すはずなので戻るのは手続きオブジェクト&lt;/li&gt;
&lt;li&gt;引数に &amp;lsquo;pop あるいは &amp;lsquo;push なシンボルをもらうのかな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.14 (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/08/eopl-ex-2-14/</link>
      <pubDate>Fri, 08 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/08/eopl-ex-2-14/</guid>
      <description>&lt;p&gt;なんか昨晩書いた試験が微妙、って思ったら pop は状態を変えるだけで値を取り出す手続きは別で存在してたんすね。いやはや。とりあえず微妙なのは以下の部分だった模様。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test* &amp;quot;get top of stack&amp;quot;
       1
       (pop (push 1 (empty-stack))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pop は値を戻すのではなくて stack を戻さないと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test* &amp;quot;get top of stack&amp;quot;
       empty-stack
       (pop (push 1 (empty-stack))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで実装書く。つうか書いてみたら試験も色々駄目でした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.13</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/07/eopl-ex-2-13/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/07/eopl-ex-2-13/</guid>
      <description>&lt;p&gt;試験スルーで軽く、ということで勘弁してもらう方向。
unparse が以下なのかどうか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define unparse-expression
  (lambda (exp)
    (cases term exp
      (var-term (id) id)
      (constant-term (datum) datum)
  (app-term (terms)
        (let app-term-unparse ((terms terms) (ret &#39;()))
          (if (null? terms)
              (reverse ret)
              (app-term-unparse (cdr terms) (cons (unparse-expression (car terms)) ret))))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.14</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/07/eopl-ex-2-14/</link>
      <pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/07/eopl-ex-2-14/</guid>
      <description>&lt;p&gt;同居人には内緒で sticker 発注だん。それは良いとしてとりあえず以下な手続きの試験を書いてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;empty-stack&lt;/li&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;pop&lt;/li&gt;
&lt;li&gt;top&lt;/li&gt;
&lt;li&gt;empty-stack?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この節の記述によれば top と empty-stack? が ovservers でそれ以外は constructors ってことで良いのかどうか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の Exercise 2.12</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/05/eopl-ex-2-12/</link>
      <pubDate>Tue, 05 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/05/eopl-ex-2-12/</guid>
      <description>&lt;p&gt;アルファ変換は lambda-calculus-subst そのまま、って理解で良いのかな。あと&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;((lambda (x) E1) E2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda-calculus-subst &#39;((lambda (x) E1) E2) E2 x)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で良いのかどうか。なんか微妙な気もします。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EoPL の exercise 2.11</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/04/eopl-ex-2-11/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/04/eopl-ex-2-11/</guid>
      <description>&lt;p&gt;そもそもな考え方が違う、という事にようやく気付くなど。
例示されてるものを使って確認してみるに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (p) (+ p x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の x を (* p 3) で置換する場合、以下になってはマズい、というのが前提。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(lambda (p) (+ (p (* p 3))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、置換自体はその通りでその外側にある p な束縛を p0 とかに変更しなきゃ、なのか。これ、自分で定義する解釈系 (?) の文法はけっこう単純になっているので無理矢理な方法で何とかなるのかどうなのか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>