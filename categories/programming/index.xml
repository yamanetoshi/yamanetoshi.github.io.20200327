<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on /var/log/messages</title>
    <link>https://weblog.metacircular-evaluator.org/categories/programming/</link>
    <description>Recent content in Programming on /var/log/messages</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 22 Jul 2019 18:40:47 +0900</lastBuildDate>
    
	<atom:link href="https://weblog.metacircular-evaluator.org/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game of Life の実装 (3)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/07/22/game-of-life-implementation/</link>
      <pubDate>Mon, 22 Jul 2019 18:40:47 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/07/22/game-of-life-implementation/</guid>
      <description>&lt;p&gt;以下が確認済み。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Universe.Supervisor&lt;/li&gt;
&lt;li&gt;Universe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;続き、は Cell.Supervisor ですかね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Game of Life の実装 (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/07/21/game-of-life-implementation/</link>
      <pubDate>Sun, 21 Jul 2019 15:38:48 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/07/21/game-of-life-implementation/</guid>
      <description>&lt;p&gt;気になっていた以下な記述、Cell なプロセス単位で位置情報も保持、ということなのか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Start a generic server process for the Cell. The process 
  # is named according to the position with a Registry as index
  def start_link(position) do
    GenServer.start_link(__MODULE__, position, name: {
      :via, Registry, {Cell.Registry, position}
    })
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これを使ってこんなことしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Translate the Cell position {x, y} into the process
  # ID if the Cell is alive (avoid ghost neighbours)
  def lookup(position) do
    Cell.Registry
    |&amp;gt; Registry.lookup(position)
    |&amp;gt; Enum.map(fn
      {pid, _valid} -&amp;gt; pid
      nil -&amp;gt; nil
    end)
    |&amp;gt; Enum.filter(&amp;amp;Process.alive?/1)
    |&amp;gt; List.first
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ある位置の Cell は生存状態かどうか、な判定ができるのかどうか。参考にしたのは以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/registry.ex&#34;&gt;lib/exlicir/lib/registry.ex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Game of Life の実装</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/07/20/game-of-life-implementation/</link>
      <pubDate>Sat, 20 Jul 2019 11:22:32 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/07/20/game-of-life-implementation/</guid>
      <description>&lt;p&gt;実装確認してみるに、vue が Phoenix 経由して Cell.Supervisor とやりとりしている模様。経由しているのは web/channels 配下にいる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Phoenix.Socket&lt;/li&gt;
&lt;li&gt;(Socket を介して) Phoenix.Channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使っています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud Shell で Game of Life を動かしてみた</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/07/19/running-game-of-life-in-cloud-shell/</link>
      <pubDate>Fri, 19 Jul 2019 10:15:01 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/07/19/running-game-of-life-in-cloud-shell/</guid>
      <description>&lt;p&gt;最初、以下なスクリプトを実行するのを忘れてました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

sudo dpkg -i ~/erlang-solutions_1.0_all.deb
sudo apt-get update
sudo apt-get install esl-erlang -fy
sudo apt-get install elixir -fy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;erlang-solutions というパケジをどこから入手したのか等、忘却の彼方。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Game of Life</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/07/18/game-of-life/</link>
      <pubDate>Thu, 18 Jul 2019 20:13:53 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/07/18/game-of-life/</guid>
      <description>&lt;p&gt;今日、某所で盛り上がったので、という訳でもないのですが明日のネタは以下で。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SimoneStefani/game-of-life&#34;&gt;https://github.com/SimoneStefani/game-of-life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OTP の理解と Phoenix の理解と ExUnit 書いてみる方向にて。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phoenix なエントリ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/06/28/phoenix-entry/</link>
      <pubDate>Fri, 28 Jun 2019 12:44:14 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/06/28/phoenix-entry/</guid>
      <description>&lt;p&gt;下記エントリ、非常に興味深い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.monterail.com/blog/ruby-on-rails-development-phoenix-elixir&#34;&gt;How we Built a Highly Performant App with Ruby on Rails and Phoenix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;巨大なトラフィックを処理するために Phoenix を選択、とあります。こうした切り口でどれだけ Phoenix が優秀なのか、な材料を確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GenStage</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/06/11/genstage/</link>
      <pubDate>Tue, 11 Jun 2019 20:56:45 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/06/11/genstage/</guid>
      <description>&lt;p&gt;以下、確認しつつ控えを以降に。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixirschool.com/ja/lessons/advanced/gen-stage/&#34;&gt;GenStage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flow</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/06/09/elixir-flow/</link>
      <pubDate>Sun, 09 Jun 2019 20:28:36 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/06/09/elixir-flow/</guid>
      <description>&lt;p&gt;バッチ処理で云々できないか、と思っているのですが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/piacere/elixirdeshi-merudetasaiensuru-men-elixirzhi-detasaiensupuratutohuomu-esuna-nite?slide=18&#34;&gt;Enum の並列処理実装「Flow」で同等処理を実装したら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というナニが掘り返されててアレ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>k8s と Elixir</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/06/07/k8s-elixir/</link>
      <pubDate>Fri, 07 Jun 2019 10:48:02 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/06/07/k8s-elixir/</guid>
      <description>&lt;p&gt;まだ道半ばとは言え超期待しているこの組合せ。上手く動くようになったら凄いな、とか思っていますが実装に貢献できるリソースを捻出するのは微妙な今日この頃。&lt;/p&gt;

&lt;p&gt;6.1 開催なイベントでも発信があったようですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/ishikawa/kiss-karahazimaru-elixir-on-kubernetes&#34;&gt;KISS からはじまる Elixir on Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web System Architecture に最適化された並列処理系</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/06/05/parallel-processing-system-optimized-for-web-system-architecture/</link>
      <pubDate>Wed, 05 Jun 2019 20:27:38 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/06/05/parallel-processing-system-optimized-for-web-system-architecture/</guid>
      <description>&lt;p&gt;北九州市立大学の zacky1972 さんのスライド、良いです。つうか最近の発信なのですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/zacky1972/web-system-architecture-nizui-shi-hua-saretabing-lie-chu-li-xi&#34;&gt;Web System Architecture に最適化された並列処理系&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ使って某所向け布教とかできんかな。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elixir マクロを使った Enum 関数の融合変換</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/06/04/fusion-transformation-of-enum-function-using-elixir-macro/</link>
      <pubDate>Tue, 04 Jun 2019 20:51:52 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/06/04/fusion-transformation-of-enum-function-using-elixir-macro/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://beam-lang.connpass.com/event/130690/presentation/&#34;&gt;japan.ex #1&lt;/a&gt; にて発表のあった以下のスライド確認してみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/hisaway/enummakurowoshi-tutaenumguan-shu-falserong-he-bian-huan&#34;&gt;Elixir マクロを使った Enum 関数の融合変換
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;確認メモを以下に控え。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (33)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/29/programming-elixir/</link>
      <pubDate>Wed, 29 May 2019 20:37:48 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/29/programming-elixir/</guid>
      <description>&lt;p&gt;スタックの課題をやってみます。お題てきにスタックのアプリケーションにスーパーバイザを追加、というものです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (32)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/23/programming-elixir/</link>
      <pubDate>Thu, 23 May 2019 21:12:25 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/23/programming-elixir/</guid>
      <description>&lt;p&gt;OTP:スーパーバイザーの章。バージョンが違うおかげで差分があるみたい。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;プロジェクト作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* creating .formatter.exs
* creating .gitignore
* creating mix.exs
* creating config
* creating config/config.exs
* creating lib
* creating lib/sequence.ex
* creating lib/sequence/application.ex
* creating test
* creating test/test_helper.exs
* creating test/sequence_test.exs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;書籍に掲載されている情報と違います。&lt;code&gt;lib/sequence.ex&lt;/code&gt; の情報は &lt;code&gt;lib/sequence/application.ex&lt;/code&gt; になっている模様。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (31)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/22/programming-elixir/</link>
      <pubDate>Wed, 22 May 2019 21:08:28 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/22/programming-elixir/</guid>
      <description>&lt;p&gt;スタックな OTP サーバの課題を、って思ってたらやっていたorz&lt;/p&gt;

&lt;h2 id=&#34;サーバ実行のトラッキング&#34;&gt;サーバ実行のトラッキング&lt;/h2&gt;

&lt;p&gt;以降を確認しつつ、控えを列挙な方向です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (30)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/17/programming-elixir/</link>
      <pubDate>Fri, 17 May 2019 09:57:06 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/17/programming-elixir/</guid>
      <description>&lt;p&gt;別場所にあった queue な課題をパクッて実装。&lt;/p&gt;

&lt;p&gt;以下なカンジで動きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ iex Stack.ex
Erlang/OTP 21 [erts-10.1] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [hipe] [dtrace]

Interactive Elixir (1.7.3) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)&amp;gt; Stack.start_link
{:ok, #PID&amp;lt;0.106.0&amp;gt;}
iex(2)&amp;gt; Stack.stack
[]
iex(3)&amp;gt; Stack.push(1)
:ok
iex(4)&amp;gt; Stack.stack  
[1]
iex(5)&amp;gt; Stack.push(2)
:ok
iex(6)&amp;gt; Stack.stack  
[2, 1]
iex(7)&amp;gt; Stack.push(3)
:ok
iex(8)&amp;gt; Stack.stack
[3, 2, 1]
iex(9)&amp;gt; Stack.pop
3
iex(10)&amp;gt; Stack.stack
[2, 1]
iex(11)&amp;gt; Stack.pop  
2
iex(12)&amp;gt; Stack.stack
[1]
iex(13)&amp;gt; Stack.pop  
1
iex(14)&amp;gt; Stack.stack
[]
iex(15)&amp;gt; Stack.pop  
nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (29)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/15/programming-elixir/</link>
      <pubDate>Wed, 15 May 2019 20:39:51 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/15/programming-elixir/</guid>
      <description>&lt;p&gt;昨日エントリの Chain な実装、色々ナチュラルに忘却の彼方なナニがありました。ポイントとしては以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create_process が始点&lt;/li&gt;
&lt;li&gt;Enum.reduce が戻すのは accumulator の最後の値&lt;/li&gt;
&lt;li&gt;accumulator の初期値は最初に起動されるプロセス&lt;/li&gt;
&lt;li&gt;spawn の戻りは起動されたプロセス&lt;/li&gt;
&lt;li&gt;Enum.reduce に渡される手続きオブジェクトの第二引数は accumulator&lt;/li&gt;
&lt;li&gt;Enum.reduce に渡される手続きオブジェクトの戻りが accumulator の値&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (28)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/14/programming-elixir/</link>
      <pubDate>Tue, 14 May 2019 22:08:08 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/14/programming-elixir/</guid>
      <description>&lt;p&gt;週末確認したドキュメントでは OTP と k8s はいくつかの懸念があるけれど、統合する方向に進んでいるとのこと。これは楽しみ。&lt;/p&gt;

&lt;p&gt;とりあえず、14 とか 15 のあたりはつまみ食いですすめます。&lt;/p&gt;

&lt;h2 id=&#34;14-2-プロセスのオーバーヘッド&#34;&gt;14.2 プロセスのオーバーヘッド&lt;/h2&gt;

&lt;p&gt;以下をでっちあげてみたのですが色々意味がわかっておらず。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule Chain do
  def counter(next_pid) do
    receive do
      n -&amp;gt;
        send next_pid, n + 1
    end
  end

  def create_processes(n) do
    last = Enum.reduce 1..n, self(),
             fn (_, send_to) -&amp;gt;
               spawn(Chain, :counter, [send_to])
             end
    send last, 0
    
    receive do
      final_answer when is_integer(final_answer) -&amp;gt;
        &amp;quot;Result is #{inspect(final_answer)}&amp;quot;
    end
  end

  def run(n) do
    IO.puts inspect :timer.tc(Chain, :create_processes, [n])
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (27)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/13/programming-elixir/</link>
      <pubDate>Mon, 13 May 2019 20:15:55 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/13/programming-elixir/</guid>
      <description>&lt;p&gt;再開。OTP サーバのあたりから。Cloud Shell にて云々しています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>書籍</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/12/book/</link>
      <pubDate>Sun, 12 May 2019 16:36:42 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/12/book/</guid>
      <description>&lt;p&gt;別途発注の方向。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/o/ASIN/4865941959/yamanetoshi-22&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;http://images-jp.amazon.com/images/P/4865941959.09.MAIN._SCLZZZZZZZ_.jpgh&#34; style=&#34;borer: none&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.co.jp/o/ASIN/4873118263/yamanetoshi-22&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;http://images-jp.amazon.com/images/P/4873118263.09.MAIN._SCLZZZZZZZ_.jpgh&#34; style=&#34;borer: none&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また積ん読が増えるのかどうか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#fukuokaex のやまざきさんの連つい</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/05/06/parenthesis-nesting/</link>
      <pubDate>Mon, 06 May 2019 13:02:19 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/05/06/parenthesis-nesting/</guid>
      <description>&lt;p&gt;非常に良いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/zacky1972/status/1125160190251130880&#34;&gt;Elixir プログラミングでかっこが多重になりそうなときに，どうしたらいいか？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lisp/Scheme だと括弧が沢山な方が格好良いカンジがあるのですが (違)、アレルギーな方にとって沢山の括弧は苦痛以外の何者でもなさげですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Property-Based Testing with PropEr, Erlang, Elixir (3)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/30/property-based-testing-with-proper-erlang-elixir/</link>
      <pubDate>Tue, 30 Apr 2019 17:19:19 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/30/property-based-testing-with-proper-erlang-elixir/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pragprog.com/book/fhproper/property-based-testing-with-proper-erlang-and-elixir&#34;&gt;Property-Based Testing with PropEr, Erlang, Elixir&lt;/a&gt; の Chapter 3 です。&lt;/p&gt;

&lt;h2 id=&#34;thinking-in-properties&#34;&gt;Thinking in Properties&lt;/h2&gt;

&lt;p&gt;あんまりきちんと中身見れていない。中項目として&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modeling&lt;/li&gt;
&lt;li&gt;Generalizing Example Tests&lt;/li&gt;
&lt;li&gt;Invariants&lt;/li&gt;
&lt;li&gt;Symmetric Properties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とのこと。順に確認しつつ自分メモを。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Property-Based Testing with PropEr, Erlang, Elixir (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/29/property-based-testing-with-proper-erlang-elixir/</link>
      <pubDate>Mon, 29 Apr 2019 08:45:41 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/29/property-based-testing-with-proper-erlang-elixir/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pragprog.com/book/fhproper/property-based-testing-with-proper-erlang-and-elixir&#34;&gt;Property-Based Testing with PropEr, Erlang, Elixir&lt;/a&gt; の Chapter 2 です。&lt;/p&gt;

&lt;h2 id=&#34;writing-properties&#34;&gt;Writing Properties&lt;/h2&gt;

&lt;p&gt;どうも PropEr の term() というナニがイメージできず。Google してみたら以下なコンテンツを発見。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://proper-testing.github.io/tutorials.html&#34;&gt;Tutorials on the PropEr use of this tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あ、でもこれ、erlang なナニですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/propcheck/PropCheck.html&#34;&gt;PropCheck - Property Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>c9.io</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/26/c9-io/</link>
      <pubDate>Fri, 26 Apr 2019 13:34:28 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/26/c9-io/</guid>
      <description>&lt;p&gt;終わるのか。困ったな。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;AWS ので、なのかどうか。丁度いいから Cloud Shell 使ってみようかな。とりあえず以下を見つつすすめてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/shell/docs/quickstart?hl=ja&#34;&gt;クイックスタート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libcluster</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/25/libcluster/</link>
      <pubDate>Thu, 25 Apr 2019 21:29:27 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/25/libcluster/</guid>
      <description>&lt;p&gt;直前エントリで確認した&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ovrmrw/items/14dc9907c2ec699f849c&#34;&gt;初心者のElixir |&amp;gt; Flow,GenStage |&amp;gt; Concurrent MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ですが、ホスト跨りで並列化とかないのかな、と思って色々探してみるに以下を発見している次第。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bitwalker/libcluster&#34;&gt;bitwalker/libcluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elixir, Flow</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/24/phoenix-excersize/</link>
      <pubDate>Wed, 24 Apr 2019 20:21:18 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/24/phoenix-excersize/</guid>
      <description>&lt;p&gt;何となく elixir とか flow とかいうキーワードが耳に入ってきまして Google 先生から教えて頂いたドキュメントが以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/ovrmrw/items/14dc9907c2ec699f849c&#34;&gt;初心者のElixir |&amp;gt; Flow,GenStage |&amp;gt; Concurrent MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;以下の順で手続きが組み立てられていってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read file in stream&lt;/li&gt;
&lt;li&gt;Parse JSON string to Map data line by line&lt;/li&gt;
&lt;li&gt;Get only the first name from the Map&lt;/li&gt;
&lt;li&gt;Count how many times the same name appered&lt;/li&gt;
&lt;li&gt;Sort in descending order of the count&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;パイプで作れる、というのが面白いですよね。自分メモを以下に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (15)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/23/phoenix-excersize/</link>
      <pubDate>Tue, 23 Apr 2019 21:36:57 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/23/phoenix-excersize/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/channels.html#content&#34;&gt;Channels&lt;/a&gt; の続き。継続は Client Libraries のあたりなのかどうか。&lt;/p&gt;

&lt;h2 id=&#34;client-libraries&#34;&gt;Client Libraries&lt;/h2&gt;

&lt;p&gt;以下のライブラリがある、とのこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Official

&lt;ul&gt;
&lt;li&gt;Official なモジュールのドキュメントは &lt;a href=&#34;https://hexdocs.pm/phoenix/js&#34;&gt;https://hexdocs.pm/phoenix/js&lt;/a&gt; とのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは以下なナニが提供されている模様。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Swift (iOS)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Java (Android)&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Elixir&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (14)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/22/phoenix-excersize/</link>
      <pubDate>Mon, 22 Apr 2019 20:28:30 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/22/phoenix-excersize/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/channels.html#content&#34;&gt;Channels&lt;/a&gt; の続き。&lt;/p&gt;

&lt;h2 id=&#34;pubsub&#34;&gt;PubSub&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://itdoc.hitachi.co.jp/manuals/link/cosmi_v0870/APKC/EU070377.HTM&#34;&gt;これ&lt;/a&gt;なのかどうか。Publisher と Subscriber なんすね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (13)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/21/phoenix-excersize/</link>
      <pubDate>Sun, 21 Apr 2019 18:24:28 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/21/phoenix-excersize/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/channels.html#content&#34;&gt;Channels&lt;/a&gt; の項。色々アレなのでゆっくりめに確認の方向です。&lt;/p&gt;

&lt;h2 id=&#34;channels&#34;&gt;Channels&lt;/h2&gt;

&lt;p&gt;Channels は何百万ものクライアント接続でリアルタイム通信を行なうための機能とのこと。使用例として以下が列挙されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;メッセージングアプリ&lt;/li&gt;
&lt;li&gt;最新ニュースの配信&lt;/li&gt;
&lt;li&gt;列車とかトラックとか、あるいはレース参加者のトラッキング&lt;/li&gt;
&lt;li&gt;マルチプレイヤーゲイムのイベント&lt;/li&gt;
&lt;li&gt;センサーの監視とか照明の制御とか&lt;/li&gt;
&lt;li&gt;CSS とか JS の変更をブラウザに通知&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (12)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/19/phoenix-excersize/</link>
      <pubDate>Fri, 19 Apr 2019 13:22:08 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/19/phoenix-excersize/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/views.html#content&#34;&gt;Views&lt;/a&gt; の章はおもしろかったです。次は &lt;a href=&#34;https://hexdocs.pm/phoenix/templates.html&#34;&gt;Templates&lt;/a&gt; とのこと。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (11)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/18/phoenix-excersize/</link>
      <pubDate>Thu, 18 Apr 2019 21:00:50 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/18/phoenix-excersize/</guid>
      <description>&lt;p&gt;継続は &lt;a href=&#34;https://hexdocs.pm/phoenix/views.html#content&#34;&gt;Views&lt;/a&gt; の More About Views の項。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (10)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/17/phoenix-excersize/</link>
      <pubDate>Wed, 17 Apr 2019 19:46:37 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/17/phoenix-excersize/</guid>
      <description>&lt;p&gt;今回からは &lt;a href=&#34;https://hexdocs.pm/phoenix/views.html#content&#34;&gt;Views&lt;/a&gt; の確認。ぢつは fukuoka.ex なスライド横目にもくもくしていたり。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (9)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/16/phoenix-excersize/</link>
      <pubDate>Tue, 16 Apr 2019 21:13:47 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/16/phoenix-excersize/</guid>
      <description>&lt;p&gt;継続は &lt;a href=&#34;https://hexdocs.pm/phoenix/controllers.html#content&#34;&gt;Controllers&lt;/a&gt; の Redirection の項。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (8)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/13/phoenix-excersize/</link>
      <pubDate>Sat, 13 Apr 2019 12:43:29 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/13/phoenix-excersize/</guid>
      <description>&lt;p&gt;挙動不審の件、色々とボケ倒していたようです。結論? から言うと plug は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def index(conn, _params) do
    conn
    |&amp;gt; render(&amp;quot;index.html&amp;quot;)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アクションを呼び出す前に conn を transform、という事でした。また、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  plug :assign_welcome_message, &amp;quot;Welcome Back&amp;quot;

  defp assign_welcome_message(conn, msg) do
    assign(conn, :message, msg)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という定義より view には message という変数を表示する形の記述にしておく必要が (勿論) ありました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Enum、Map、String などの確認</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/11/concurrency-and-parallelism-in-elixir/</link>
      <pubDate>Thu, 11 Apr 2019 20:25:55 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/11/concurrency-and-parallelism-in-elixir/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://weblog.metacircular-evaluator.org/blog/2019/04/10/concurrency-and-parallelism-in-elixir/&#34;&gt;昨日エントリ&lt;/a&gt;関連でよく分からない手続きについて確認した事項を以下に列挙します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Concurrency and Parallelism in Elixir</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/10/concurrency-and-parallelism-in-elixir/</link>
      <pubDate>Wed, 10 Apr 2019 20:31:44 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/10/concurrency-and-parallelism-in-elixir/</guid>
      <description>&lt;p&gt;並行と並列と、という部分で参考になるドキュメントを発見。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://exercism.io/blog/concurrency-parallelism-in-elixir&#34;&gt;Concurrency and Parallelism in Elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;機械翻訳に通してみたのですがそれ見つつで色々動作確認できるのかどうか。ざっくり控えを以下に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>読むだけでおもしろさがわかる 大人のための囲碁入門 (スマート新書)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/08/phoenix-excersize/</link>
      <pubDate>Mon, 08 Apr 2019 20:52:16 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/08/phoenix-excersize/</guid>
      <description>&lt;p&gt;以下、買いです。というか買う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4909546073/yamanetoshi-22&#34;&gt;読むだけでおもしろさがわかる 大人のための囲碁入門 (スマート新書)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にも買わねば、をスルーしてるんですよねorz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://peaks.cc/books/ui_design&#34;&gt;はじめての UI デザイン&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とか&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (7)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/07/phoenix-excersize/</link>
      <pubDate>Sun, 07 Apr 2019 16:52:58 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/07/phoenix-excersize/</guid>
      <description>&lt;p&gt;とりあえず、&lt;a href=&#34;https://hexdocs.pm/phoenix/controllers.html#flash-messages&#34;&gt;Flash Messages&lt;/a&gt; の節から続きを。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flutter で WebView</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/06/use-webview-in-flutter/</link>
      <pubDate>Sat, 06 Apr 2019 13:36:24 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/06/use-webview-in-flutter/</guid>
      <description>&lt;p&gt;試してみました。戻るボタンの click event はどうやって捕まえるのかな。とりあえず実装控えを以下に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (6)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/05/phoenix-excersize/</link>
      <pubDate>Fri, 05 Apr 2019 09:48:41 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/05/phoenix-excersize/</guid>
      <description>&lt;p&gt;昨日のつづきと &lt;a href=&#34;https://hexdocs.pm/phoenix/controllers.html#content&#34;&gt;Controllers&lt;/a&gt; は長いので適当なあたりまでについて以下に控えを列挙します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (5)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/04/phoenix-excersize/</link>
      <pubDate>Thu, 04 Apr 2019 21:05:48 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/04/phoenix-excersize/</guid>
      <description>&lt;p&gt;今日は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/endpoint.html#content&#34;&gt;Endpoint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のあたりを確認しつつ控えを列挙。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (4)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/03/phoenix-excersize/</link>
      <pubDate>Wed, 03 Apr 2019 20:35:59 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/03/phoenix-excersize/</guid>
      <description>&lt;p&gt;今日は以下あたりを機械翻訳したのでそれを見つつポイント列挙の方向。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/plug.html#content&#34;&gt;Plug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (3)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/02/phoenix-excersize/</link>
      <pubDate>Tue, 02 Apr 2019 20:37:36 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/02/phoenix-excersize/</guid>
      <description>&lt;p&gt;今日は以下を確認しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/routing.html&#34;&gt;Routing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;色々ポイント高そうなのでエントリ分けるかもしれませんが、以下に控えを。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/04/01/phoenix-excersize/</link>
      <pubDate>Mon, 01 Apr 2019 14:37:33 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/04/01/phoenix-excersize/</guid>
      <description>&lt;p&gt;次のステップは &lt;a href=&#34;https://hexdocs.pm/phoenix/adding_pages.html&#34;&gt;Adding Pages&lt;/a&gt; になります。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>phoenix excersize</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/31/phoenix-excersize/</link>
      <pubDate>Sun, 31 Mar 2019 16:17:30 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/31/phoenix-excersize/</guid>
      <description>&lt;p&gt;色々試してみる対応で時間を使ってみることに。とりあえず cloud9 で workspace をつくって&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@Oxyrus/how-to-install-the-phoenix-framework-on-cloud9-ef0ac265229c&#34;&gt;A guide on how to setup your Cloud9 workspace to run Phoenix applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下をすすめる方向にて。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hexdocs.pm/phoenix/up_and_running.html&#34;&gt;Up and Running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elixir Community</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/30/elixir-community/</link>
      <pubDate>Sat, 30 Mar 2019 12:33:52 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/30/elixir-community/</guid>
      <description>&lt;p&gt;reddit に elixir な community があるのを見つけています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/elixir/&#34;&gt;https://www.reddit.com/r/elixir/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最近のトピックをいくつか確認しつつ、以下に控えてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fukuoka.ex#20</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/17/fukuoka-ex-20/</link>
      <pubDate>Sun, 17 Mar 2019 08:41:10 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/17/fukuoka-ex-20/</guid>
      <description>&lt;p&gt;もくもく会をどんなカンジですすめてらっしゃるのか、ということで参加してきました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fukuoka.ex#20</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/11/fukuoka-ex-20/</link>
      <pubDate>Mon, 11 Mar 2019 20:14:42 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/11/fukuoka-ex-20/</guid>
      <description>&lt;p&gt;こないだの週末に開催アナウンスが発信されているのを確認。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fukuokaex.connpass.com/event/123582/&#34;&gt;fukuoka.ex#20：Elixir／Phoenixもくもく会～入門もあるよ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Twelve-Factor App</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/10/the-twelve-factor/</link>
      <pubDate>Sun, 10 Mar 2019 10:01:36 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/10/the-twelve-factor/</guid>
      <description>&lt;p&gt;恥ずかしながら、存じあげませんでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://12factor.net/ja/&#34;&gt;THE TWELVE-FACTOR APP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud Native Hiroshima</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/09/creating-overlays/</link>
      <pubDate>Sat, 09 Mar 2019 06:44:30 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/09/creating-overlays/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cnjp.connpass.com/event/119241/&#34;&gt;Cloud Native Hiroshima #2&lt;/a&gt; に参加してきました。以下、控えを列挙します。&lt;/p&gt;

&lt;p&gt;そのうちどなたかがつぎゃってくれるのかどうか。楽しみにしておきます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ作成されました&#34;&gt;まとめ作成されました&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://togetter.com/li/1326589&#34;&gt;Cloud Native Hiroshima #02 まとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Overlays</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/08/creating-overlays/</link>
      <pubDate>Fri, 08 Mar 2019 15:14:58 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/08/creating-overlays/</guid>
      <description>&lt;p&gt;以下なドキュメントの無断機械翻訳を自分メモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pynq.readthedocs.io/en/v1.3/10_creating_overlays.html&#34;&gt;Creating Overlays&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>First FPGA (1)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/07/first-fpga/</link>
      <pubDate>Thu, 07 Mar 2019 22:05:26 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/07/first-fpga/</guid>
      <description>&lt;p&gt;とりあえず、vivado が導入できてる状態。以下を確認しつつもう少しすすめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>elixir 自習</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/06/studying-elixir/</link>
      <pubDate>Wed, 06 Mar 2019 20:32:18 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/06/studying-elixir/</guid>
      <description>&lt;p&gt;プログラミング Elixir は一旦止めます。とりあえず以下なメモに沿って&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://weblog.metacircular-evaluator.org/blog/2019/02/25/elixir-memo/&#34;&gt;https://weblog.metacircular-evaluator.org/blog/2019/02/25/elixir-memo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Elixir 関連のドキュメントに目を通して Phoenix 方面に、な方向なのかどうか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (26)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/05/programming-elixir/</link>
      <pubDate>Tue, 05 Mar 2019 20:13:08 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/05/programming-elixir/</guid>
      <description>&lt;p&gt;終わりと言いつつもう少し。&lt;/p&gt;

&lt;h2 id=&#34;13-14-タスク-プロジェクトドキュメントの生成&#34;&gt;13.14 タスク: プロジェクトドキュメントの生成&lt;/h2&gt;

&lt;p&gt;ExDoc および earmark な依存関係を mix.exs に追加。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (25)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/04/programming-elixir/</link>
      <pubDate>Mon, 04 Mar 2019 20:00:08 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/04/programming-elixir/</guid>
      <description>&lt;p&gt;13 章はこのエントリで終わりにしたい。残は 13.13 と 13.14、13.15 な模様。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (24)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/03/programming-elixir/</link>
      <pubDate>Sun, 03 Mar 2019 13:14:06 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/03/programming-elixir/</guid>
      <description>&lt;p&gt;13.11 タスク: 実行可能なコマンドを作成、の節。このあたりからどんどんすすめることができるのかどうか。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;mix.exs の修正なのかな。というか、git の面倒全然見れてなくて微妙。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (23)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/02/programming-elixir/</link>
      <pubDate>Sat, 02 Mar 2019 13:45:58 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/02/programming-elixir/</guid>
      <description>&lt;p&gt;13.10 変換: テーブルに整形、の節。直前エントリで確認した通りでまんま出力すれば良いだけ感がありますが違うのかな。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (22)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/03/01/programming-elixir/</link>
      <pubDate>Fri, 01 Mar 2019 12:58:45 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/03/01/programming-elixir/</guid>
      <description>&lt;p&gt;13.9 変換: 最初の n 個を取り出す、の節。パイプで繋いで head する的な機能ですね。&lt;/p&gt;

&lt;h2 id=&#34;enum-take&#34;&gt;Enum.take&lt;/h2&gt;

&lt;p&gt;を使う、とのこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def process([user, project, count]) do
    Issues.GithubIssues.fetch(user, project)
    |&amp;gt; decode_response
    |&amp;gt; convert_to_list_of_maps
    |&amp;gt; sort_into_ascending_order
    |&amp;gt; Enum.take(count)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (21)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/28/programming-elixir/</link>
      <pubDate>Thu, 28 Feb 2019 20:53:43 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/28/programming-elixir/</guid>
      <description>&lt;p&gt;13.8 変換: データを並び替える、の節。&lt;/p&gt;

&lt;h2 id=&#34;enum-sort-2&#34;&gt;Enum.sort/2&lt;/h2&gt;

&lt;p&gt;パイプでどんどん繋いでいくさまがとても気持ち良いですね。ベルトコンベアな「デザイン」というのも分かりやすくて良いです。また、今回については試験も作っています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (20)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/27/programming-elixir/</link>
      <pubDate>Wed, 27 Feb 2019 19:53:49 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/27/programming-elixir/</guid>
      <description>&lt;p&gt;13.7 変換: レスポンスを加工する、の節。&lt;/p&gt;

&lt;h2 id=&#34;json-の加工&#34;&gt;JSON の加工&lt;/h2&gt;

&lt;p&gt;poison というライブラリを使う模様。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Run &amp;quot;mix help deps&amp;quot; to learn about dependencies.
  defp deps do
    [
      # {:dep_from_hexpm, &amp;quot;~&amp;gt; 0.3.0&amp;quot;},
      # {:dep_from_git, git: &amp;quot;https://github.com/elixir-lang/my_dep.git&amp;quot;, tag: &amp;quot;0.1.0&amp;quot;},
      { :httpoison, &amp;quot;~&amp;gt; 0.8&amp;quot;},
      { :poison,    &amp;quot;~&amp;gt; 1.5&amp;quot;},
    ]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (19)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/26/programming-elixir/</link>
      <pubDate>Tue, 26 Feb 2019 21:05:10 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/26/programming-elixir/</guid>
      <description>&lt;p&gt;HTTPoison の Github のドキュメントを確認してみます。以下で良いのかどうか。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edgurgel/httpoison&#34;&gt;https://github.com/edgurgel/httpoison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloud Native DevOps With Kubernetes</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/25/cloud-native-devops-with-kubernetes/</link>
      <pubDate>Mon, 25 Feb 2019 21:38:52 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/25/cloud-native-devops-with-kubernetes/</guid>
      <description>&lt;p&gt;本日朝イチにて以下なエントリ確認。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.publickey1.jp/blog/19/kubernetesoreillycloud_native_devops_with_kubernetespdfnginx.html&#34;&gt;Kubernetesの基本から運用まで解説したO&amp;rsquo;Reillyの書籍「Cloud Native DevOps With Kubernetes」PDF版、NGINXが無料配布中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自分メモ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/25/elixir-memo/</link>
      <pubDate>Mon, 25 Feb 2019 09:04:26 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/25/elixir-memo/</guid>
      <description>&lt;p&gt;先日の fukuoka.ex でのセッションから、チュートリアルの読み方のコツ、という @zacky1972 さんの tweet を自分用に控え。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/zacky1972/status/1097460195758768128&#34;&gt;https://twitter.com/zacky1972/status/1097460195758768128&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プログラミング Elixir てきには 13 章まで、で良いらしい。&lt;/p&gt;

&lt;h2 id=&#34;もひとつ&#34;&gt;もひとつ&lt;/h2&gt;

&lt;p&gt;ざっくまんの人がまとめてくれた togetter が以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://togetter.com/li/1321510&#34;&gt;fukuoka.ex19：Elixir実践テクニック公開します③ツイートまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (18)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/24/programming-elixir/</link>
      <pubDate>Sun, 24 Feb 2019 10:31:50 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/24/programming-elixir/</guid>
      <description>&lt;p&gt;13.6 タスク: ライブラリを使う、から再開。&lt;/p&gt;

&lt;h2 id=&#34;mix-exs&#34;&gt;mix.exs&lt;/h2&gt;

&lt;p&gt;メタな方でもハマッたソレです。httpoison 導入らしく。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>環境設定</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/23/environmental-setting/</link>
      <pubDate>Sat, 23 Feb 2019 09:38:21 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/23/environmental-setting/</guid>
      <description>&lt;p&gt;RISC-V を FPGA で、なナニ向けに自宅端末の環境設定を。あと、Metraprogramming Elixir はしばらく休んで Programming Elixir をすすめます。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;今日は環境設定メモを以下に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (11)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/22/metaprogramming-elixir/</link>
      <pubDate>Fri, 22 Feb 2019 11:55:45 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/22/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;直前エントリのハマり方が超酷い。今回どうなるのかorz&lt;/p&gt;

&lt;h2 id=&#34;リトライしてみます&#34;&gt;リトライしてみます&lt;/h2&gt;

&lt;p&gt;とりあえず本文の機械翻訳確認しつつ再度すすめる方向にて。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (10)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/21/metaprogramming-elixir/</link>
      <pubDate>Thu, 21 Feb 2019 20:45:27 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/21/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;Code Generation from Remote APIs という題が付いています。これは凄い。&lt;/p&gt;

&lt;h2 id=&#34;mix-project-setup&#34;&gt;Mix Project Setup&lt;/h2&gt;

&lt;p&gt;テキストのソレは version が微妙なのかしら。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mix new hub --bare
** (Mix) Could not invoke task &amp;quot;new&amp;quot;: 1 error found!
--bare : Unknown option
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (9)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/20/metaprogramming-elixir/</link>
      <pubDate>Wed, 20 Feb 2019 20:30:53 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/20/metaprogramming-elixir/</guid>
      <description>&lt;h2 id=&#34;final-step&#34;&gt;Final Step&lt;/h2&gt;

&lt;p&gt;Identify Areas for Compile-Time Optimizations とのこと。ぐぐる翻訳によれば&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;実行時に評価される正規表現を生成できますが、コンパイル時の最適化を適用しましょう。 値を補間する場合にのみ文字列連結を実行する必要がある関数定義を生成できます。 これにより、実行時にパフォーマンスが大幅に向上します。 interpolate を定義して実装を完成させましょう。その仕事は、必要に応じて補間を使用して t/3 関数本体のASTを返すことです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とのこと。以下な実装が例示されています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (8)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/19/metaprogramming-elixir/</link>
      <pubDate>Tue, 19 Feb 2019 20:09:59 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/19/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;Macro.to_string で生成されたコードを理解、という小休憩てきな節。Translator module に以下な修正を、とのこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def compile(translations) do
    translations_ast = for {locale, mappings} &amp;lt;- translations do
      deftranslations(locale, &amp;quot;&amp;quot;, mappings)
    end

    final_ast = quote do
      def t(locale, path, binding \\ [])
      unquote(translations-ast)
      def t(_locale, _path, _bindings), do: {:error, :no_translation}
    end

    IO.puts Macro.to_string(final_ast)
    final_ast
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (7)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/18/metaprogramming-elixir/</link>
      <pubDate>Mon, 18 Feb 2019 21:21:34 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/18/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;Advanced Compile-Time Code Generation の Chapter 3 です。最初に出てくるのは UnicodeData.txt を例にした外部データがコード生成手続きを呼び出す例。&lt;/p&gt;

&lt;p&gt;一つには以下な情報 (一部のみ) を行単位で読みこんで&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;application/javascript  .js
application/json        .json
image/jpeg              .jpeg, .jpg
video/jpeg              .jpgv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リストにしてそれに手続きを割り当てる、という事をしてます。これはこれで便利。そしてこのテキストファイルを更新した時点でコンパイルも動かしてしまえ、という属性があるとのこと。これは凄い。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (6)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/17/metaprogramming-elixir/</link>
      <pubDate>Sun, 17 Feb 2019 12:09:22 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/17/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;ちょっと復習。&lt;code&gt;accumulate:true&lt;/code&gt; な記述のあたりを列挙しておきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モジュール属性を使用すると、コンパイル時にデータをモジュールに格納できる&lt;/li&gt;
&lt;li&gt;これらは他の言語で定数が適用される場所でよく使われるが、Elixirはコンパイル時に悪用するための他のトリックを提供する&lt;/li&gt;
&lt;li&gt;属性を登録するときにaccumulate：trueオプションを利用することで、コンパイル段階で登録された追加リストを保持できる&lt;/li&gt;
&lt;li&gt;モジュールがコンパイルされた後、属性にはコンパイル中に発生したすべての登録のリストが含まれる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;accumulate:true が今ひとつ理解できていないのかどうか。てか、翻訳時に評価された値が属性に値として格納される、ってことなのか。そしてここで問題になってくるのが評価される順番なのね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (5)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/16/metaprogramming-elixir/</link>
      <pubDate>Sat, 16 Feb 2019 11:31:22 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/16/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;コードの生成に module attributes を使う、とのこと。翻訳時にモジュールに格納されてるデータにアクセスできる、なのかどうか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;accumulate:true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というオプションが attribute を登録する時に云々、とあります。&lt;/p&gt;

&lt;h2 id=&#34;test-macro&#34;&gt;test macro&lt;/h2&gt;

&lt;p&gt;二つの argument を受け取る、とのこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;string description (キーワードリスト?)&lt;/li&gt;
&lt;li&gt;do/end なコードブロック&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (4)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/15/metaprogramming-elixir/</link>
      <pubDate>Fri, 15 Feb 2019 07:41:19 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/15/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;ゴールは他のモジュールを test macro で拡張すること、らしい。以下な testing framework を、との事です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule MathTest do
  use Assertion

  test &amp;quot;integers can be added and subtracted&amp;quot; do
    assert 1 + 1 == 2
    assert 2 + 3 == 5
    assert 5 - 5 == 10
  end

  test &amp;quot;integers can be multiplied and divided&amp;quot; do
    assert 5 * 5 == 25
    assert 10 / 2 == 5
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行例が以下らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex&amp;gt; MathTest.run
..
===========================
FAILURE: integers can be added and subtracted
===========================
   Expected:       0
   to be equal to: 10
..:ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>広島のElixirコミュニティ、その名もElixiroshima</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/14/elixiroshima/</link>
      <pubDate>Thu, 14 Feb 2019 20:10:02 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/14/elixiroshima/</guid>
      <description>&lt;p&gt;広島でも勉強会が kickoff される模様。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elixiroshima.connpass.com/event/119543/&#34;&gt;Elixiroshima 第1回ミートアップ — Elixir、始めてみようや。広島での。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;行きたひ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fukuoka.ex#19</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/13/fukuokaex/</link>
      <pubDate>Wed, 13 Feb 2019 20:07:08 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/13/fukuokaex/</guid>
      <description>&lt;p&gt;リモート視聴枠が増員になったので速攻でぽちりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fukuokaex.connpass.com/event/120102/&#34;&gt;【好評につき増枠しました】fukuoka.ex#19：Elixir実践テクニック公開します③&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;その後&#34;&gt;その後&lt;/h2&gt;

&lt;p&gt;compass メンテでアクセスできなくなってて焦りましたが登録はできてた模様。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (3)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/12/metaprogramming-elixir/</link>
      <pubDate>Tue, 12 Feb 2019 19:58:22 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/12/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;Chapter 2 に突入。とりあえず if な特殊形式な macro を作る模様。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/11/metaprogramming-elixir/</link>
      <pubDate>Mon, 11 Feb 2019 12:09:45 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/11/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;マクロは caller のためのコードを生成するのではなく注入 (inject) する、とあります。コンテキストに注入、という表現になっていますね。コンテキストとは caller の&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bindings&lt;/li&gt;
&lt;li&gt;imports&lt;/li&gt;
&lt;li&gt;aliases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とあります。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Metaprogramming Elixir (1)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/10/metaprogramming-elixir/</link>
      <pubDate>Sun, 10 Feb 2019 10:08:46 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/10/metaprogramming-elixir/</guid>
      <description>&lt;p&gt;こちらも再確認に着手。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quote do&lt;/code&gt; で AST が確認できる、というのがアレゲです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex(4)&amp;gt; quote do: div(10,2)
{:div, [context: Elixir, import: Kernel], [10, 2]}
iex(5)&amp;gt; quote do: 1 + 2    
{:+, [context: Elixir, import: Kernel], [1, 2]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あと、&lt;code&gt;if&lt;/code&gt; がマクロ、というのもナニ (何&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (17)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/09/programming-elixir/</link>
      <pubDate>Sat, 09 Feb 2019 12:42:45 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/09/programming-elixir/</guid>
      <description>&lt;p&gt;12 章の制御フローはスルーして 13 章確認着手。OrganizingAProject-1 をテキスト確認しつつすすめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (16)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/04/programming-elixir/</link>
      <pubDate>Mon, 04 Feb 2019 20:31:35 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/04/programming-elixir/</guid>
      <description>&lt;p&gt;ダブルクオート文字列のリストのセンタリング表示な課題。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;length&lt;/li&gt;
&lt;li&gt;rjust&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が使えるのかどうか。確認しつつすすめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (15)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/02/03/programming-elixir/</link>
      <pubDate>Sun, 03 Feb 2019 14:04:44 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/02/03/programming-elixir/</guid>
      <description>&lt;p&gt;なんとなく parse は酷い感がアレ。とは言え色々面倒なのでこのまま進めます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (14)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/31/programming-elixir/</link>
      <pubDate>Thu, 31 Jan 2019 20:46:23 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/31/programming-elixir/</guid>
      <description>&lt;p&gt;StringsAndBinaries-4 は難問、とありますね。検討してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (12)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/28/programming-elixir/</link>
      <pubDate>Mon, 28 Jan 2019 21:28:17 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/28/programming-elixir/</guid>
      <description>&lt;p&gt;StringsAndBinaries-1 がよく分からんので、直前にある Parse の動作確認をしてみることに。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>#fukuokaex (#kokuraex)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/27/fukuoka-elixir/</link>
      <pubDate>Sun, 27 Jan 2019 14:32:56 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/27/fukuoka-elixir/</guid>
      <description>&lt;p&gt;面白かったしアツかったです。というか言語? フレームワーク? てきにもアツい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://togetter.com/li/1312672&#34;&gt;https://togetter.com/li/1312672&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;久々につぎゃりました (勉強会参加もひさびさ)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (13)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/26/programming-elixir/</link>
      <pubDate>Sat, 26 Jan 2019 06:58:12 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/26/programming-elixir/</guid>
      <description>&lt;p&gt;次の練習問題 StringsAndBinaries-2 について。アナグラム、って何でしたっけ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (11)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/23/programming-elixir/</link>
      <pubDate>Wed, 23 Jan 2019 20:55:18 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/23/programming-elixir/</guid>
      <description>&lt;p&gt;どうもキーワードリストの car はリストらしい。むむむむ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (10)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/22/programming-elixir/</link>
      <pubDate>Tue, 22 Jan 2019 21:54:24 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/22/programming-elixir/</guid>
      <description>&lt;p&gt;キーワードリスト、何だったかというあたりからのリハビリになるのかorz&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;確認を。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex(26)&amp;gt; tax_rates = [ NC: 0.075, TX: 0.08]
[NC: 0.075, TX: 0.08]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参照が以下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex(30)&amp;gt; tax_rates[:NC]
0.075
iex(31)&amp;gt; tax_rates[:TX]
0.08
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (9)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/21/programming-elixir/</link>
      <pubDate>Mon, 21 Jan 2019 19:54:30 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/21/programming-elixir/</guid>
      <description>&lt;p&gt;span て見たことないな、と思ったら作っていませんでした。のでそちらから。&lt;/p&gt;

&lt;h2 id=&#34;listsandrecursion-4&#34;&gt;ListsAndRecursion - 4&lt;/h2&gt;

&lt;p&gt;以下で良かった模様。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  def span(to, to), do: [to]
  def span(from, to) do
    [from | span(from+1, to)]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パタンマッチ、強力ですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (8)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/20/programming-elixir/</link>
      <pubDate>Sun, 20 Jan 2019 17:58:06 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/20/programming-elixir/</guid>
      <description>&lt;p&gt;flatten という手続きを実装せよ、とのこと。&lt;code&gt;Enum.reverse&lt;/code&gt; を使え、とのこと。リストの項で以下な例が出てきています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex(43)&amp;gt; List.flatten([[[1], 2], [[[3]]]])
[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (7)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/19/programming-elixir/</link>
      <pubDate>Sat, 19 Jan 2019 13:52:13 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/19/programming-elixir/</guid>
      <description>&lt;p&gt;あまりドキュメントの確認の仕方って理解できていないかも。来週の勉強会で質問してみようかな。ともあれ、10 章の Enum と Stream 確認開始。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kokura.ex#1</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/18/kokura-ex/</link>
      <pubDate>Fri, 18 Jan 2019 13:15:15 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/18/kokura-ex/</guid>
      <description>&lt;p&gt;参加登録だん。今回は小倉開催とのこと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fukuokaex.connpass.com/event/116855/&#34;&gt;kokura.ex#1：小倉Elixirコミュニティ発足【セッション／LTと懇親会】（19:30～）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;福岡開催のにも顔が出せれば良いな、と思っています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FPGA な環境設定</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/17/how-to-make-risc-v-by-fpga/</link>
      <pubDate>Thu, 17 Jan 2019 20:56:44 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/17/how-to-make-risc-v-by-fpga/</guid>
      <description>&lt;p&gt;とりあえず JDK8 は導入できている模様。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version
openjkd version &amp;quot;1.8.0_181&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_181_8u181-b13-2~deb9u1-b13)
OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本見つつ順にすすめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (6)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/16/programming-elixir/</link>
      <pubDate>Wed, 16 Jan 2019 20:39:40 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/16/programming-elixir/</guid>
      <description>&lt;p&gt;7 章のリストと再帰、に突入。lisp/scheme なヒトなので、このあたりは慣れている、というか何というか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (5)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/15/programming-elixir/</link>
      <pubDate>Tue, 15 Jan 2019 20:38:43 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/15/programming-elixir/</guid>
      <description>&lt;p&gt;練習問題 7 が意外に難しく。ぐーぐるで探せとか何それ、っていう。。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (4)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/14/programming-elixir/</link>
      <pubDate>Mon, 14 Jan 2019 12:26:07 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/14/programming-elixir/</guid>
      <description>&lt;p&gt;ModuleAndFunction - 6 は若干の微妙感あり。以下なヒントが列挙されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現時点での推測値を持つヘルパー関数作れ&lt;/li&gt;
&lt;li&gt;div(a, b) は整数の除算&lt;/li&gt;
&lt;li&gt;ガード節を使いなさい&lt;/li&gt;
&lt;li&gt;パタンマッチをうまく使う (a..b = 4..8)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>element-ui と rwdImageMaps を nuxt.js に盛り込む記録</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/13/element-ui-and-rwdimagemaps-on-nuxt-js/</link>
      <pubDate>Sun, 13 Jan 2019 14:40:01 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/13/element-ui-and-rwdimagemaps-on-nuxt-js/</guid>
      <description>&lt;p&gt;git log を確認しつつ記録してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (3)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/12/i-tried-using-station/</link>
      <pubDate>Sat, 12 Jan 2019 14:24:07 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/12/i-tried-using-station/</guid>
      <description>&lt;p&gt;chapter 6 のモジュールと名前付き関数の章、練習問題を確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラマのためのFPGAによるRISC-Vマイコンの作り方</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/10/how-to-make-risc-v-by-fpga/</link>
      <pubDate>Thu, 10 Jan 2019 21:00:40 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/10/how-to-make-risc-v-by-fpga/</guid>
      <description>&lt;p&gt;@koj911 さんの以下の tweet を見て&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/koj911/status/1082900554253103104&#34;&gt;https://twitter.com/koj911/status/1082900554253103104&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/09/programming-elixir/</link>
      <pubDate>Wed, 09 Jan 2019 22:39:22 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/09/programming-elixir/</guid>
      <description>&lt;p&gt;昨日の続きをちょっとだけ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elixir を OSX に導入</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/08/install-elixir-osx/</link>
      <pubDate>Tue, 08 Jan 2019 20:54:12 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/08/install-elixir-osx/</guid>
      <description>&lt;p&gt;入れてみます。というか &lt;code&gt;brew install&lt;/code&gt; 一発なのかどうか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プログラミング Elixir</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2019/01/07/programming-elixir/</link>
      <pubDate>Mon, 07 Jan 2019 21:00:13 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2019/01/07/programming-elixir/</guid>
      <description>&lt;p&gt;とりあえず本読みつつ備忘メモを投入していく方向で。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>明日はすごい広島</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/25/sugoi-hiroshima/</link>
      <pubDate>Tue, 25 Dec 2018 21:26:34 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/25/sugoi-hiroshima/</guid>
      <description>&lt;p&gt;楽しみだなぁ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://great-h.connpass.com/event/113816/&#34;&gt;すごい広島293 with Python[21]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;先日発信の通り、以下なネタでもくもくする方向。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan-medical-ai.github.io/medical-ai-course-materials/&#34;&gt;メディカルAI専門コース オンライン講義資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>来週のもくもくネタ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/20/mokumoku-neta/</link>
      <pubDate>Thu, 20 Dec 2018 21:59:53 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/20/mokumoku-neta/</guid>
      <description>&lt;p&gt;面白い材料を見つけたのでトライしてみる方向。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://japan-medical-ai.github.io/medical-ai-course-materials/&#34;&gt;メディカルAI専門コース オンライン講義資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ウーマンラッシュアワー村本</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/14/ruby-one-liner/</link>
      <pubDate>Fri, 14 Dec 2018 20:15:44 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/14/ruby-one-liner/</guid>
      <description>&lt;p&gt;The MANZAI は先週でしたっけ。ウーマン村本来沖でイベント開催らしく。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://peatix.com/event/582612/view&#34;&gt;ウーマンラッシュアワー村本がいま思ってることを話す夜〜お疲れでしょう、飲みながら気軽に笑いに来てください〜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ruby のワンライナー</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/12/ruby-one-liner/</link>
      <pubDate>Wed, 12 Dec 2018 20:24:56 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/12/ruby-one-liner/</guid>
      <description>&lt;p&gt;の中でバッククォートな展開させると例えば&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;$Gcid$&#39;|ruby -e &amp;quot;puts STDIN.read.gsub(&#39;$Gcid$&#39;, &#39;$Gcid: &#39; + `git rev-parse HEAD`.strip + &#39;$&#39;)&amp;quot;
-e:1: syntax error, unexpected tIDENTIFIER, expecting &#39;)&#39;
53c4e21fbe6816fa424c18dc674e81.strip + &#39;$&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいになるの、何なのか。シェルの展開になってて文字列として認識されないのかな。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>材料</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/10/material/</link>
      <pubDate>Mon, 10 Dec 2018 20:07:24 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/10/material/</guid>
      <description>&lt;p&gt;nuxt.js な PWA にて以下なリクエストが。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タブで表示コンテンツ切り替えたい&lt;/li&gt;
&lt;li&gt;自動で遷移するスライド的なナニがないか&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nuxt プロジェクトのはじめかた</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/09/how-to-start-nuxt-project/</link>
      <pubDate>Sun, 09 Dec 2018 16:18:11 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/09/how-to-start-nuxt-project/</guid>
      <description>&lt;p&gt;自分メモ、ということで。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>週末対応</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/12/02/weekend-compliant/</link>
      <pubDate>Sun, 02 Dec 2018 19:34:41 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/12/02/weekend-compliant/</guid>
      <description>&lt;p&gt;ハマッてたナニが解決できた。以下、自分メモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HDD からデータ吸出し</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/11/29/data-extraction/</link>
      <pubDate>Thu, 29 Nov 2018 21:28:03 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/11/29/data-extraction/</guid>
      <description>&lt;p&gt;以前使ってた NAS からええ加減データ復旧しないと、と思いつつ数年が経過。安い usb 変換なケーブル (600 円) を見つけて入手。&lt;/p&gt;

&lt;h2 id=&#34;電源&#34;&gt;電源&lt;/h2&gt;

&lt;p&gt;ない? って思ったのですが無理矢理 NAS なデバイスからアレしてみたら&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&#34;true&#34;  href=&#34;https://www.flickr.com/photos/yamane-toshiaki/32230117748/in/dateposted-public/&#34; title=&#34;データ吸い出し&#34;&gt;&lt;img src=&#34;https://farm5.staticflickr.com/4813/32230117748_9315a292b1_z.jpg&#34; width=&#34;640&#34; height=&#34;640&#34; alt=&#34;データ吸い出し&#34;&gt;&lt;/a&gt;&lt;script async src=&#34;//embedr.flickr.com/assets/client-code.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>yarn 移行</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/11/28/move-to-yarn/</link>
      <pubDate>Wed, 28 Nov 2018 20:39:06 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/11/28/move-to-yarn/</guid>
      <description>&lt;p&gt;某所にて yarn 使ってね、って指示があったので手持ちのプロジェクトでも同様な操作を。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>elixir もくもく</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/11/17/elixir-mokumoku/</link>
      <pubDate>Sat, 17 Nov 2018 13:36:19 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/11/17/elixir-mokumoku/</guid>
      <description>&lt;p&gt;以下なもくもく、リモート枠は一杯らしく、単独でもくもくしてみた記録を。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fukuokaex.connpass.com/event/107738/&#34;&gt;fukuoka.ex#15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nuxt.js で PWA</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/11/16/nuxtjs-pwa/</link>
      <pubDate>Fri, 16 Nov 2018 22:03:28 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/11/16/nuxtjs-pwa/</guid>
      <description>&lt;p&gt;えと、nuxt.config.js の最下層レベルに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;modules: [
  &#39;@nuxtjs/pwa&#39;
],
manifest: {
    // 中身略
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;って追加したのだければ、&lt;code&gt;npm run generate&lt;/code&gt; とかで微妙なエラーが出てて困っていたのですが&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nuxt で thview</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/11/14/thview-in-nuxt/</link>
      <pubDate>Wed, 14 Nov 2018 21:08:10 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/11/14/thview-in-nuxt/</guid>
      <description>&lt;p&gt;某所向けにもごもごしている次第。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nuxt.js 採用&lt;/li&gt;
&lt;li&gt;firebase にナニ&lt;/li&gt;
&lt;li&gt;PWA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という方向で、なのですが色々分からずすすめているのですが諸々ハマッている次第。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>thinkpad x220 調達</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/10/28/get-thinkpad-x220/</link>
      <pubDate>Sun, 28 Oct 2018 20:50:14 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/10/28/get-thinkpad-x220/</guid>
      <description>&lt;p&gt;以下のコンテンツを随分前から確認していたのですが、ようやく調達に着手。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://foxblog.net/2017/10/10/123238/&#34;&gt;2万で買えるPC「ThinkPad X220」がコスパ最強で優秀すぎる件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;端末は 2 万未満だったのですが、色々調達。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>素材があったので</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/10/10/thview-js/</link>
      <pubDate>Wed, 10 Oct 2018 20:42:39 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/10/10/thview-js/</guid>
      <description>&lt;p&gt;以下を使ってみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aike/thview.js?files=1&#34;&gt;aike/thview.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;theta の画像て hmd でも使えたりするのか。このあたりちょっと出遅れ気味だけに。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Preact で PWA</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/10/08/how-to-create-a-pwa-game-using-preact-in-5-steps-tutorial/</link>
      <pubDate>Mon, 08 Oct 2018 18:56:34 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/10/08/how-to-create-a-pwa-game-using-preact-in-5-steps-tutorial/</guid>
      <description>&lt;p&gt;以下な記事を見つけている次第です。確認してみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/how-to-create-a-pwa-game-using-preact-in-5-steps-tutorial-c8b177037c80&#34;&gt;How to Create a PWA Game using Preact in 5 steps (Tutorial)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phoenix Json Tutorial</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/10/07/phoenix-json-tutorial/</link>
      <pubDate>Sun, 07 Oct 2018 20:53:35 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/10/07/phoenix-json-tutorial/</guid>
      <description>&lt;p&gt;以下なエントリの続き。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://weblog.metacircular-evaluator.org/blog/2018/10/04/phoenix-json-tutorial/&#34;&gt;Phoenix Json Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;以下に沿って postgres 関連の設定盛り込み。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@Oxyrus/how-to-install-the-phoenix-framework-on-cloud9-ef0ac265229c&#34;&gt;How to install the Phoenix Framework on Cloud9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、思ったら全部済ませてるのかな。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Phoenix Json Tutorial</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/10/04/phoenix-json-tutorial/</link>
      <pubDate>Thu, 04 Oct 2018 19:49:07 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/10/04/phoenix-json-tutorial/</guid>
      <description>&lt;p&gt;開発用の Docker なナニがあるってことでそれを利用する方向です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/foxtrackjp/items/bc74f64eae3ce33c8125&#34;&gt;Docker で Phoenix Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず、でびあん号で、って思ったら docker-compose が駄目らしい。最新のでびあん、ってバージョンどうなってるんだろう。手元のソレは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat debian_version
9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;らしい。仕方ないので MBA で確認すすめます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>何と言えば良いのやら</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/10/02/i-wonder-what-i-should-say/</link>
      <pubDate>Tue, 02 Oct 2018 20:36:28 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/10/02/i-wonder-what-i-should-say/</guid>
      <description>&lt;p&gt;今日、import な CSV を graphson に出力する generator みたいな Python スクリプトを書いててくっそハマッてたのですが (pandas め)、気が付いたらなんとなく動くものがでっちあがってました。&lt;/p&gt;

&lt;p&gt;これは第六感、ではないよなぁ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>S 式のパースについて</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/08/27/about-parse-s-expression/</link>
      <pubDate>Mon, 27 Aug 2018 20:56:02 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/08/27/about-parse-s-expression/</guid>
      <description>&lt;p&gt;微妙なパクリ方してるので駄目なことになっている感満点なので再検討してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再帰下降構文解析器 (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/08/20/recursive-descent-syntax-analyzer/</link>
      <pubDate>Mon, 20 Aug 2018 21:28:55 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/08/20/recursive-descent-syntax-analyzer/</guid>
      <description>&lt;p&gt;parser.go の ParseProgram 起点で &amp;ldquo;1 + 2 + 3&amp;rdquo; を parse するナニを掘削してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>scheme 実装</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/08/19/implementation-of-scheme-by-go/</link>
      <pubDate>Sun, 19 Aug 2018 19:01:46 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/08/19/implementation-of-scheme-by-go/</guid>
      <description>&lt;p&gt;着手。もくもく会では微妙な lexer をでっち上げたところで timeup でした。&lt;/p&gt;

&lt;h2 id=&#34;もう少し&#34;&gt;もう少し&lt;/h2&gt;

&lt;p&gt;repl まで実装。がしかし、なんとなく微妙感があります。まず、リテラル式のあたりが微妙。とりあえず&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(quote xxx)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という形を、ですね。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;手元にある R5RS をもとに色々すすめようと思っています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>再帰下降構文解析器</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/08/15/recursive-descent-syntax-analyzer/</link>
      <pubDate>Wed, 15 Aug 2018 19:42:16 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/08/15/recursive-descent-syntax-analyzer/</guid>
      <description>&lt;p&gt;基本的な考え方と構造、について自分メモを以下に控え。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>リモートもくもく会</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/08/01/remote-moku-moku/</link>
      <pubDate>Wed, 01 Aug 2018 21:15:54 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/08/01/remote-moku-moku/</guid>
      <description>&lt;p&gt;明日ですよ、な通知が着信してたのですが、今日だったのかとタマゲた件w&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://java-kuche.doorkeeper.jp/events/78025&#34;&gt;リモートもくもく会#3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もくもく会、定期開催し続けて欲しいです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unit Test の Hands-on 資料まとめ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/02/15/unit-test-hands-on/</link>
      <pubDate>Thu, 15 Feb 2018 22:10:59 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/02/15/unit-test-hands-on/</guid>
      <description>&lt;p&gt;以下資料について確認を行い、纏めを作成しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/srym/DroidKaigi2018UnitTestHandOn&#34;&gt;Android Unit Testing Hands-On&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>書籍購入</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/02/14/books/</link>
      <pubDate>Wed, 14 Feb 2018 20:13:22 +0900</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/02/14/books/</guid>
      <description>&lt;p&gt;以下、発注。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/B079JLW5YN/yamanetoshi-22&#34;&gt;プログラマの数学 第2版 Kindle版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/dp/4274069095/yamanetoshi-22&#34;&gt;ディジタル作法 −カーニハン先生の「情報」教室&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.jp/Android/dp/479805366X/yamanetoshi-22&#34;&gt;Androidアプリ開発のためのKotlin実践プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>低レベルプログラミング</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/01/28/low-level-programming-memo/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/01/28/low-level-programming-memo/</guid>
      <description>&lt;p&gt;環境設定を docker にて。とりあえず debian:8 な image で &lt;code&gt;docker run&lt;/code&gt; しています。起動後に以下を導入。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build-essential&lt;/li&gt;
&lt;li&gt;nasm&lt;/li&gt;
&lt;li&gt;gdb&lt;/li&gt;
&lt;li&gt;emacs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;までの時点で commit 作成して dockerhub 方面にナニ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ゲンジツトウヒ系なドキュメント</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2018/01/23/building-an-operating-system-for-the-raspberry-pi/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2018/01/23/building-an-operating-system-for-the-raspberry-pi/</guid>
      <description>以下、確認の方向にて。 Building an Operating System for the Raspberry Pi</description>
    </item>
    
    <item>
      <title>すっかり忘れてた</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/07/17/i-completely-forgot/</link>
      <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/07/17/i-completely-forgot/</guid>
      <description>&lt;p&gt;C で書く cat な実装。ファイルは一つ限定。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fill.asm implementation (nand2tetris)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/07/12/fill-implementation/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/07/12/fill-implementation/</guid>
      <description>I thought it would be better to separate the procedure to paint white and the procedure to paint black. Points listed below.
 I was misunderstanding the size of screen memory I could not use expressions such as R0 and R1 M[0] stores the screen state M[1] stores the screen memory index If it is in the same state as before, it ends I described branch processing when the value of keyboard memory (M [24576]) is 0  I am unfamiliar so I can not write repetitive processing immediately.</description>
    </item>
    
    <item>
      <title>decode 検討</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/07/09/consideration-of-decode-function/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/07/09/consideration-of-decode-function/</guid>
      <description>&lt;p&gt;入力をそのままスルーで出力する回路って Add16 の片方に 0 入れれば良いのかどうか。あとはそれぞれの回路が必要としている制御ビットが整理できれば良いはず。&lt;/p&gt;

&lt;p&gt;以下なのかどうか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Zero determination in Boolean arithmetic</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/07/02/zero-determination-in-boolean-arithmetic/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/07/02/zero-determination-in-boolean-arithmetic/</guid>
      <description>I did not think it would be possible to write like this.
CHIP ALU { IN x[16], y[16], // 16-bit inputs zx, // zero the x input? nx, // negate the x input? zy, // zero the y input? ny, // negate the y input? f, // compute out = x + y (if 1) or x &amp;amp; y (if 0) no; // negate the out output? OUT out[16], // 16-bit output zr, // 1 if (out == 0), 0 otherwise ng; // 1 if (out &amp;lt; 0), 0 otherwise PARTS: // Put you code here: Not16(in=x, out=notx); Mux4Way16(a=x, b=notx, c[0.</description>
    </item>
    
    <item>
      <title>Effective Debugging 届いた</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/06/21/effective-debugging-arrived/</link>
      <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/06/21/effective-debugging-arrived/</guid>
      <description>職場てきに色々使えるので明日持ってきます。 というか、購入依頼かけて 2 日後に届くとかオライリーすごいな。まだ発売前のはずなんですが。</description>
    </item>
    
    <item>
      <title>TensorFlow</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/06/20/tensorflow/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/06/20/tensorflow/</guid>
      <description>自分メモ。 TensorFlow Trainer Development Considerations Cloud ML のための TensorFlow アプリケーション作法</description>
    </item>
    
    <item>
      <title>Effective Debugging</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/06/19/effective-debugging/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/06/19/effective-debugging/</guid>
      <description>これ、買お。 Effective Debugging</description>
    </item>
    
    <item>
      <title>ゼロから作る Deep Learning のソースコード読みのための諸々</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/04/30/code-reading-tool/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/04/30/code-reading-tool/</guid>
      <description>&lt;p&gt;近々にコードリーディングな集いをする事になりそうなのでメモを投入。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>読書会参加</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2017/04/29/reading-meeting/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2017/04/29/reading-meeting/</guid>
      <description>&lt;p&gt;以下なナニに参加。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://uitf.connpass.com/event/53801/&#34;&gt;ゼロから作る Deep Learning 読書会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;諸々メモを以下に。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>やねうら王 Linux でビルドできるのか</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/09/24/build-yaneura-ou-on-linux/</link>
      <pubDate>Sat, 24 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/09/24/build-yaneura-ou-on-linux/</guid>
      <description>&lt;p&gt;ひさびさに&lt;a href=&#34;http://yaneuraou.yaneu.com/yaneuraou_mini/&#34;&gt;やねうら王オープンソースプロジェクト&lt;/a&gt;を見てみたら Ubuntu でビルドできる旨の記述が追加されているのを発見。てか、もしかして最初から Linux でもコンパイルできる形だったのかどうか。&lt;/p&gt;

&lt;p&gt;VS 使うしかないかな、って思っていたのですがちょっとやってみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>週末サイエンティストのすすめ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/09/23/weekend-scientist/</link>
      <pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/09/23/weekend-scientist/</guid>
      <description>このスライドでちょっと前向きになりかけていたりします。 週末サイエンティストのすすめ 最近は 何故か体力不足で休みがち 体力の不足を補うために運動 そ</description>
    </item>
    
    <item>
      <title>やねうら王オープンソースプロジェクト (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/06/10/yaneura-ou/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/06/10/yaneura-ou/</guid>
      <description>&lt;p&gt;以下のドキュメントですが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yaneuraou.yaneu.com/yaneuraou_mini&#34;&gt;やねうら王オープンソースプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現状、&lt;em&gt;やねうら王で遊ぼう&lt;/em&gt; というコンテンツを確認しつつ備忘やら別途確認な諸々を列挙している所です。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>やねうら王オープンソースプロジェクト</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/06/09/yaneura-ou/</link>
      <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/06/09/yaneura-ou/</guid>
      <description>&lt;p&gt;興味深いドキュメントをご紹介頂きました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yaneuraou.yaneu.com/yaneuraou_mini&#34;&gt;やねうら王オープンソースプロジェクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;開発環境が VS なのでアレなんですが、Linux で動くのだったかどうか。とりあえず空き稼動を使って読み始めることにしました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gunyanza 読むことにした件</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/03/17/gunyanza-code-reading/</link>
      <pubDate>Thu, 17 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/03/17/gunyanza-code-reading/</guid>
      <description>&lt;p&gt;とりあえず動かしてみる所から始めるのかどうか。色々アレなのでとりあえず実行環境な Docker コンテナを云々する所から開始してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>プリンシプル オブ プログラミング</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/03/05/principle-of-programming/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/03/05/principle-of-programming/</guid>
      <description>備忘メモ。出版されたら速攻購入の方向。 書籍「プリンシプル オブ プログラミング」を執筆しました</description>
    </item>
    
    <item>
      <title>将棋プログラミングなエントリを入れたら</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/01/15/shogi-programming/</link>
      <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/01/15/shogi-programming/</guid>
      <description>&lt;p&gt;@zu2 先パイよりいくつかポインタを頂いたので備忘エントリ投入。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>コンピュータ将棋の進歩</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2016/01/14/shogi-book/</link>
      <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2016/01/14/shogi-book/</guid>
      <description>最近、将棋ブログと化してる感満点ですが、こないだちらっと立ち読みして面白かったので全部入手の方向で。 共立出版で検索した結果 とりあえず取り寄せ</description>
    </item>
    
    <item>
      <title>CodeCombat</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/11/30/codecombat/</link>
      <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/11/30/codecombat/</guid>
      <description>若い方々が以下なソレを見つけて云々されていらっしゃった。 CODE COMBAT 9 歳以降、ということなので試してみようか思案中。</description>
    </item>
    
    <item>
      <title>python-shogi</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/11/11/python-shogi/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/11/11/python-shogi/</guid>
      <description>&lt;p&gt;云々できる環境を作ります。とりあえず python:2.7 なナニを元に image を作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run -i -t -d python:2.7 /bin/bash
$ sudo docker ps -l -q
da334369b2b8
$ sudo docker attach da334369b2b8
root@da334369b2b8:/usr/src/python# python --version
Python 2.7.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、一旦 &lt;code&gt;C-p C-q&lt;/code&gt; で脱出して commit を作っておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker commit da334369b2b8 yamanetoshi/python-shogi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、ソース共有できる場所をアレするのか。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker run -i -t -d -v /home/rms/Documents:/opt yamanetoshi/python-shogi /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ということで確認作業など着手。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>java 1.8</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/10/05/java-1-dot-8/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/10/05/java-1-dot-8/</guid>
      <description>どうも Jenkins な plugin 作るためには 1.8 必須らしい。Android はどうなのかな、と思って確認してみるに、Android Studio であれば以下なファイルの /Applications/Android\ Studio.app/Contents/Info.plist の以</description>
    </item>
    
    <item>
      <title>Z80 演習本</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/08/22/z80-practice-book/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/08/22/z80-practice-book/</guid>
      <description>&lt;p&gt;以下な tweeet に触発されて衝動的に購入。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/1re1/status/633968835758952448&#34;&gt;https://twitter.com/1re1/status/633968835758952448&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たまたま在庫があったはず。超ラッキー。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CPU を作る課題</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/14/making-cpu/</link>
      <pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/14/making-cpu/</guid>
      <description>&lt;p&gt;pc が次の命令を、ではなくて A レジスタにあるアドレスを、というケイスについては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C 命令の j 領域&lt;/li&gt;
&lt;li&gt;ALU の戻り (zr および ng)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を元に判断すれば良い、というのは分かっているのですが、どうやって判定してその結果を load なフラグに保存すれば良いのか、が微妙。どのゲイトを使えば良いのかも分からない次第ス。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Machine Language</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/13/machine-language/</link>
      <pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/13/machine-language/</guid>
      <description>&lt;p&gt;Hack 機械語の章、一昨日のもくもくでさくっとヤッツケる予定だったのですが、間接参照な書き方でハマッておりました。&lt;/p&gt;

&lt;p&gt;画面なピクセルのメモリマップに白黒な情報を転送したくて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ptr = ADDRESS + i;
*ptr = color;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいな実装を、だったのですが思ったとおりに動いてくれず。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sequential Logic (nand to tetris(7))</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/06/nand2tetris7/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/06/nand2tetris7/</guid>
      <description>&lt;p&gt;この章ではメモリを実装する模様。プリミティブな回路として DFF が用意されているとのこと。これを基にして&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;レジスタ (DFF を基礎とする)&lt;/li&gt;
&lt;li&gt;メモリ (レジスタを基礎とする)&lt;/li&gt;
&lt;li&gt;カウンタ回路 (レジスタを基礎とする)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を実装していくとのことです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>加算器の実装など (nand to tetris(6))</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/05/nand2tetris6/</link>
      <pubDate>Sun, 05 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/05/nand2tetris6/</guid>
      <description>&lt;p&gt;とりあえず 02 なディレクトリに 01/*.hdl をコピィして &lt;code&gt;git init&lt;/code&gt; したり Github に push したりしておいて実装着手。&lt;/p&gt;

&lt;p&gt;要件見てみるに sum は Xor の出力、carry は And の出力で良いのかな。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マルチビットバージョン (nand to tetris(5))</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/04/nand2tetris5/</link>
      <pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/04/nand2tetris5/</guid>
      <description>&lt;p&gt;16 ビット並列なゲートも作れとのこと。繰り返しって使えるのかな、と思い &lt;code&gt;for&lt;/code&gt; とか使ってみましたが、どうも実装されていないようで .hdl が読みこめませんでした。仕方が無いのでコピペでアレしましたが、これはなかなかに辛みのあるナニですな (何&lt;/p&gt;

&lt;p&gt;とりあえずここまでの時点で作ってる部品は使って良いとのことなのでそのまんま使ってしまい multi-bit なソレは実装できました。&lt;/p&gt;

&lt;p&gt;また、この HDL では変数の使いまわしはできないみたいなので Or8Way もちょっと工夫が必要らしい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>デマルチプレクサ (nand to tetris(4))</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/03/nand2tetris4/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/03/nand2tetris4/</guid>
      <description>&lt;p&gt;間隙を縫うように検討着手。要件は以下らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Demultiplexor:
 * {a, b} = {in, 0} if sel == 0
 *          {0, in} if sel == 1
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ええと、a には (and in (not sel))、b には (and in sel) で良いのかな。なんとなくテストなソレと机上演算の結果は合致。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>マルチプレクサ (nand to tetris(3))</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/02/nand2tetris3/</link>
      <pubDate>Thu, 02 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/02/nand2tetris3/</guid>
      <description>&lt;p&gt;マルチプレクサは&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Y = ( A \cdot S) + (B \cdot \bar{S})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で表現されるとのこと。むむむ。&lt;/p&gt;

&lt;p&gt;hdl てきにはこうなるのかな。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(a And sel) Or (b And (Not sel))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こりゃ凄い。この答えを考えて出す、のが訓練なのか。つうかよく考えれば Or 使えば条件分岐を実装できるんですね。むむむ、修行が足りぬ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>nand to tetris</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/01/nand2tetris/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/01/nand2tetris/</guid>
      <description>これ、面白い。 From NAND to Tetris 次回もくもくでもすすめる方向にて。</description>
    </item>
    
    <item>
      <title>nand to tetris (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/04/01/nand2tetris2/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/04/01/nand2tetris2/</guid>
      <description>&lt;p&gt;1.5 Project では Nand から全てを、ということらしい。これは面白い。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>swift のチュートリアルやってみる?</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2015/03/24/try-swift-tutorial/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2015/03/24/try-swift-tutorial/</guid>
      <description>&lt;p&gt;と言いつつ Xcode を更新。どうなるか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RasPI な GPIO で L チカなプログラム</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/09/26/direct-gpio-register-manipulation-in-c-code/</link>
      <pubDate>Fri, 26 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/09/26/direct-gpio-register-manipulation-in-c-code/</guid>
      <description>&lt;p&gt;ええと、以下な二種類の方法がある模様。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sysfs を使う&lt;/li&gt;
&lt;li&gt;レジスタを mmap して直接書き込む&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえず sysfs について確認してみました。まず抵抗とか LED なんかをブレッドボードに取り付けて #1 な PIN と GND を接続しておきます。&lt;/p&gt;

&lt;p&gt;あとは以下で LED が点灯。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS アプリの構造について控え</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/31/about-ios-application/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/31/about-ios-application/</guid>
      <description>ええと、プロジェクトの General なプロパティ (?) に Main Interface という属性があるのでその中身を確認。Navigation Controller なる項目があるのでその中に定義されてい</description>
    </item>
    
    <item>
      <title>docker_rails_dev_env 確認</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/27/dig-docker-rails-dev-env/</link>
      <pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/27/dig-docker-rails-dev-env/</guid>
      <description>&lt;p&gt;とりあえず d というスクリプトから確認を。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails4 開発環境作ってみます (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/22/make-development-environment-of-rails4/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/22/make-development-environment-of-rails4/</guid>
      <description>&lt;p&gt;とりあえず三つの container が動いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo docker.io ps -a
CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS              PORTS                     NAMES
7fbe569f3fbf        rails:latest             /start-server.sh       10 seconds ago      Up 10 seconds       0.0.0.0:3000-&amp;gt;3000/tcp    rails                
c49233f54278        postgres:latest          /usr/local/bin/run     20 hours ago        Up 20 hours         5432/tcp                  postgres,rails/db    
ed4809b7d731        johncosta/redis:latest   /usr/bin/redis-serve   21 hours ago        Up 21 hours         0.0.0.0:49153-&amp;gt;6379/tcp   rails/redis,redis    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;netstat 見ると 3000 をリスンしています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker run の v オプション</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/21/v-option-of-docker-run/</link>
      <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/21/v-option-of-docker-run/</guid>
      <description>試してみたところ、nfsd 不要でした、 $ sudo docker.io run -t -i -v /home/devops/rails_projects/hoge:/opt ubuntu:12.04 /bin/bash でも相対パスでは NG でした。と、ゆーことで開発環境の実装すすめます。</description>
    </item>
    
    <item>
      <title>Rails4 開発環境作ってみます</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/20/make-development-environment-of-rails4/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/20/make-development-environment-of-rails4/</guid>
      <description>&lt;p&gt;とりあえず目指す構成としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu な仮想ホストに Docker および nfsd を導入&lt;/li&gt;
&lt;li&gt;Rails, PostgreSQL, Redis なコンテナ&lt;/li&gt;
&lt;li&gt;アプリのディレクトリは nfs で共有&lt;/li&gt;
&lt;li&gt;Rails コマンド叩きたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと、仮想ホストの環境設定などは ansible を使って云々な形にしたいです。どうなるか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pi-baremetal</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/14/pi-baremetal/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/14/pi-baremetal/</guid>
      <description>&lt;p&gt;とりあえず README から確認。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker v1.1.0 読んでみる</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/10/reading-docker-v1-dot-1-0/</link>
      <pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/10/reading-docker-v1-dot-1-0/</guid>
      <description>&lt;p&gt;動かしながら、ということで。tutorial は以下を使ってみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://apatheia.info/blog/2013/06/17/docker/&#34;&gt;仮想環境構築に docker を使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今、手元にある docker が&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker --version
Docker version 0.11.1, build fb99f99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とのことなので v1.1.0 なタグを checkout しています。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker 読みかけをもう少しすすめてみる</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/09/reading-docker/</link>
      <pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/09/reading-docker/</guid>
      <description>&lt;p&gt;土曜のもくもくで着手しかけてたメモをもうすこしすすめてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/08/golang/</link>
      <pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/08/golang/</guid>
      <description>&lt;p&gt;Docker は golang で書いてあるみたい。ちょっとチュートリアルとかに手を出してみようかなと思い環境整備してみることに。&lt;/p&gt;

&lt;p&gt;手元のでびあん端末だと以下らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ apt-cache search gccgo
gccgo-4.7 - GNU Go compiler
gccgo-4.7-multilib - GNU Go compiler (multilib files)
gccgo - Go compiler, based on the GCC backend
gccgo-multilib - Go compiler, based on the GCC backend (multilib files)
gccgo-4.6-doc - documentation for the GNU Go compiler (gccgo)
gccgo-4.7-doc - documentation for the GNU Go compiler (gccgo)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; の構造体とか</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/02/structure-in-c-plusplus/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/02/structure-in-c-plusplus/</guid>
      <description>&lt;p&gt;ひょんなきっかけから 10 数年ぶりに C++ を云々するハメに。ぼくも C++ 廃止案に賛成のヒトなんですが、まぁ仕方無いですね。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Test 試してみるなど</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/07/01/google-test/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/07/01/google-test/</guid>
      <description>&lt;p&gt;とりあえず以下から download しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://googletest.googlecode.com/files/gtest-1.7.0.zip&#34;&gt;gtest-1.7.0.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解凍して云々。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ unzip gtest-1.7.0.zip
$ cd gtest-1.7.0
$ mkdir lib
$ g++ -c -Iinclude -I. src/gtest-all.cc
$ ar -rv lib/libgtest.a gtest-all.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに OSX 上で作業してます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>placement new</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/06/30/placement-new/</link>
      <pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/06/30/placement-new/</guid>
      <description>&lt;p&gt;これ、知りませなんだ。某所にてソース掘削中に以下な記述を発見。C++ です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt;

// 中略

    new (ptr) T;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちょい略しすぎですが。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>xv6-rpi 掘削</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/06/15/dig-xv6-rpi/</link>
      <pubDate>Sun, 15 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/06/15/dig-xv6-rpi/</guid>
      <description>&lt;p&gt;okidevops で QEMU 向けだから駄目、って事にしかけたんですが pi-baremetal ほど真面目にヤらなくても良いのではないか、と思いはじめた次第です。&lt;/p&gt;

&lt;p&gt;メモは以下に投入してます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://okinawadevops.github.io/2014/06/14/yamanetoshi/&#34;&gt;okidevops で xv6-rpi 掘削メモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえずヤリかけの set_bootpgtbl 手続きから確認開始。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>続 initsys.c 確認 (pi-baremetal 確認)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/06/10/check-pi-baremetal/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/06/10/check-pi-baremetal/</guid>
      <description>&lt;p&gt;コメント確認入れてみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>initsys.c 確認 (pi-baremetal 確認)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/06/06/check-pi-baremetal/</link>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/06/06/check-pi-baremetal/</guid>
      <description>&lt;p&gt;ええとコメントに以下な記述があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; * The memory is divided in to 4096 1MB sections. Most of these are
 * unmapped (resulting in prefetch/data aborts), except
 * 0x8000000-0xa1000000, which are mapped to 0x00000000-0x2a000000
 * (physical memory and peripherals), and the kernel code and data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何故に 2048 を引いてるのか問題について引き続き確認を。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pi-baremetal 確認など</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/06/03/check-pi-baremetal/</link>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/06/03/check-pi-baremetal/</guid>
      <description>&lt;p&gt;空き時間を利用してとりあえず start.s から確認開始。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pi-baremetal</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/28/pi-baremetal/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/28/pi-baremetal/</guid>
      <description>&lt;p&gt;ちょっとヨユーをカマして確認してみたりなど。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>v6pi</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/26/pi-baremetal/</link>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/26/pi-baremetal/</guid>
      <description>以下なリポジトリを発見しています。 brianwiddas/pi-baremetal ARM1176JZF-S manual も入手したのですが、ばたばた状態で何もできないス。</description>
    </item>
    
    <item>
      <title>RPi な U-Boot の動作確認</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/13/operation-check-of-u-boot-in-raspi/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/13/operation-check-of-u-boot-in-raspi/</guid>
      <description>&lt;p&gt;結線してシリアル接続な日曜夜。&lt;/p&gt;

&lt;p&gt;以下な出力を確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;U-Boot 2014.04-rc1-g0b635b1-dirty (Apr 28 2014 - 21:12:34)

DRAM:  448 MiB
WARNING: Caches not enabled
MMC:   bcm2835_sdhci: 0
Using default environment

In:    serial
Out:   lcd
Err:   lcd
Net:   Net Initialization Skipped
No ethernet found.
** No partition table - mmc 0 **
Hit any key to stop autoboot:  0 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Makefile を Linux 向けに修正してみるなど</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/10/modify-makefile-for-linux/</link>
      <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/10/modify-makefile-for-linux/</guid>
      <description>&lt;p&gt;とりあえず fork したリポジトリから clone したディレクトリで branch 作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、Makefile を修正。完全に自分向け。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ベクタテーブル</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/08/interrupt-vector-table/</link>
      <pubDate>Thu, 08 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/08/interrupt-vector-table/</guid>
      <description>_start の直後で 0x0 番地にコピィされる割り込みベクタテーブルの記述があって、実行する時の挙動がイメージできてなかったんですが、よくよく見れば簡単な話</description>
    </item>
    
    <item>
      <title>v6pi の中身確認とか</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/07/v6-unix-raspi/</link>
      <pubDate>Wed, 07 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/07/v6-unix-raspi/</guid>
      <description>&lt;p&gt;とりあえず fork したソレからこっち側に clone して中身確認。今は以下なカンジ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls
base  gpio  README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gpio の中が以下で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls gpio/
main.c   memmap    README.md vp_gpio.c vp_typedef.h 
Makefile raspi.cfg vector.s  vp_gpio.h  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;base の中が以下。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls base/
base.c  Makefile  memmap  raspi.cfg  README.md  vector.s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず base の中から確認を。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>U-Boot を RPi で動かす</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/06/making-u-boot-in-rpi/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/06/making-u-boot-in-rpi/</guid>
      <description>&lt;p&gt;入手方法は以下で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git://github.com/swarren/u-boot.git
$ cd u-boot
$ git checkout -b rpi_dev origin/rpi_dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下で make とのこと。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export CROSS_COMPILE=arm-unknown-eabi-
make rpi_b_config
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若干のソース修正も入っていますがここでは略。&lt;/p&gt;

&lt;p&gt;fatls について色々確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>U-Boot で fatls</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/05/05/fatls-in-uboot/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/05/05/fatls-in-uboot/</guid>
      <description>&lt;p&gt;fatls というコマンドで SDCard の情報が取得できない、という不具合がある模様。諸々確認してみます。こーゆー具体的な事案があると第六感デバッガとしては嬉しい (ぇ&lt;/p&gt;

&lt;p&gt;つうか、なんとなく仕様非公開なトラップのような気がしてきつつある今日この頃。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>U-Boot で微妙な問題が出ているらしく</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/29/problem-using-u-boot/</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/29/problem-using-u-boot/</guid>
      <description>&lt;p&gt;以下などを確認しつつ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elinux.org/RPi_U-Boot&#34;&gt;RPi U-Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とりあえずソース入手など。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UART 入力とか出力とか (2)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/28/newline-code/</link>
      <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/28/newline-code/</guid>
      <description>&lt;p&gt;どうも enter が &amp;lsquo;\r&amp;rsquo; (0x0d) なのが微妙、という話になっていたり。&lt;/p&gt;

&lt;p&gt;文字列を入力して改行契機で出力、な例がありまして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    do {
        while(*UART0_FR &amp;amp; (1 &amp;lt;&amp;lt; 4));
            c = * UART0_DR ;
            echo[length] = c &amp;amp; 0xff ;
            length ++;
    } while(c != &#39;\n&#39; &amp;amp;&amp;amp; i &amp;lt; 256);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで改行を &amp;lsquo;\n&amp;rsquo; (0x0a) としてますが自分が使ってる環境だと screen でも minicom でも &amp;lsquo;\r&amp;rsquo; (0x0d) になってました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UART 入力とか出力とか</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/27/uart-input-output-in-raspi/</link>
      <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/27/uart-input-output-in-raspi/</guid>
      <description>&lt;p&gt;参考にさせて頂いてるサンプルには入力はないですね。このあたりを云々してみたいと思っていますがどうなるか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UART 初期化について色々試してみた</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/26/initializing-uart-in-raspi/</link>
      <pubDate>Sat, 26 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/26/initializing-uart-in-raspi/</guid>
      <description>&lt;p&gt;今のサンプルの実装って&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;boot.S で JTAG の初期化してる&lt;/li&gt;
&lt;li&gt;GPIO の初期化も boot.S でやってる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということになってたり。とりあえず現状含めて UART な初期化のあたりの盛り込みというか色々試験してみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UART 初期化成功</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/25/initializing-uart/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/25/initializing-uart/</guid>
      <description>&lt;p&gt;何が悪いのかは未だ判明しておりません。&lt;/p&gt;

&lt;p&gt;以下では初期化に成功しておらず&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    *GPPUDCLK0 = (1 &amp;lt;&amp;lt; 14) | (1 &amp;lt;&amp;lt; 15);
    delay(150);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下で認識しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    pinMode(14, INPUT_PULLDOWN);
    pinMode(15, INPUT_PULLDOWN);
    pinMode(14, ALT0);
    pinMode(15, ALT0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;おそらく、ですがこの差分が核心なのかどうか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自分用に</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/25/pin-assign-respi/</link>
      <pubDate>Fri, 25 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/25/pin-assign-respi/</guid>
      <description>ピンアサインのカンペを作成。 {% gist 11290203 %}</description>
    </item>
    
    <item>
      <title>#kernelvm @沖縄</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/24/kernelvm-in-okinawa/</link>
      <pubDate>Thu, 24 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/24/kernelvm-in-okinawa/</guid>
      <description>&lt;p&gt;なんかあれよあれよと言ってる間に開催しちゃう? みたいな流れになってるあたりが最近のソーシャルな世の中を反映してるようでアレです。&lt;/p&gt;

&lt;p&gt;とりあえずわしの微妙な tweet に @syuu1228 さんが反応してくれて&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@yamanetoshi 主催者と会場と最低三名の発表者を確保していただけるならば参加者・ストリーミング担当として参戦しますが&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/syuu1228/status/458881490730745857&#34;&gt;http://twitter.com/syuu1228/status/458881490730745857&lt;/a&gt; より引用&lt;/p&gt;

&lt;p&gt;となり&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@yamanetoshi ぼくを発表者に加えていただいて+1で残り二名でもいいと思います。流石に話す人が誰もいないまま流れてしまうと勿体無いので。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/syuu1228/status/458884530443522048&#34;&gt;http://twitter.com/syuu1228/status/458884530443522048&lt;/a&gt; より引用&lt;/p&gt;

&lt;p&gt;となり、そして琉大 i.e. 方面でももごもごしてる方がいらっしゃるとのこと。場所のアサインも可能らしくこれはやるしかないっしょ的流れです。&lt;/p&gt;

&lt;p&gt;もう一名発表者な方がいらっしゃればどんどん開催に向けて準備を進める方向ですがどうなることか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>raspi な QEMU</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/23/boot-raspi-in-qemu/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/23/boot-raspi-in-qemu/</guid>
      <description>このネタ、どっかで見たなぁ、と思いつつ。以下ドキュメントに方法が載ってました。 ARM RaspberryPi Tutorial C こうして $ mkdir qemu-build $ cd qemu-build $ git clone https://github.com/Torlus/qemu/tree/rpi src $ mkdir build $ cd build $ ../src/configure --prefix=$YOURINSTALLLOCATION \ --target-list=arm-softmmu,arm-linux-user,armeb-linux-user --enable-sdl</description>
    </item>
    
    <item>
      <title>昨晩の件 (JTAG 接続なソレを書き換えてみる)</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/21/modify-jtag-function-in-assembler/</link>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/21/modify-jtag-function-in-assembler/</guid>
      <description>&lt;p&gt;何が悪いのか、と言いつつ空き稼動で再度確認してみたところ、C で書いてる kernel_main 手続き先頭にある&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void kernel_main(uint32_t r0, uint32_t r1, uint32_t atags) {
    init_gpio();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;がコメントアウトされておりませんでした。そりゃ駄目だわな。&lt;/p&gt;

&lt;h2 id=&#34;とりあえず&#34;&gt;とりあえず&lt;/h2&gt;

&lt;p&gt;JTAG 初期化な bootstrap な手続きができたのでソースを綺麗にして commit を作っておこうと思ってます。&lt;/p&gt;

&lt;p&gt;続きがあれば追記するかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JTAG 接続なソレを書き換えてみる</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/20/modify-jtag-function-in-assembler/</link>
      <pubDate>Sun, 20 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/20/modify-jtag-function-in-assembler/</guid>
      <description>&lt;p&gt;以下なカンジになってるのですが&lt;/p&gt;

&lt;p&gt;{% gist 11105171 %}&lt;/p&gt;

&lt;p&gt;初期処理を assembler で書くとどうなるのだろうか、とか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>メモを試してみました</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/17/test-jatag-connector/</link>
      <pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/17/test-jatag-connector/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://yamanetoshi.github.io/blog/2014/04/16/rpi-micon-c85book-repository/&#34;&gt;昨日なエントリ&lt;/a&gt;を試験してみることに。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RPi_Micon_C85book リポジトリ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/16/rpi-micon-c85book-repository/</link>
      <pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/16/rpi-micon-c85book-repository/</guid>
      <description>&lt;p&gt;ええと baremetal 本の&lt;a href=&#34;https://github.com/jitomesky/RPi_Micon_C85book&#34;&gt;参考リポジトリ&lt;/a&gt;の jtag_connector ディレクトリを確認してみます。&lt;/p&gt;

&lt;p&gt;中身を確認してみたところでは、Makefile でターゲットになってるファイルも同梱されていますね。&lt;/p&gt;

&lt;p&gt;このファイル名 (rpi-micon.img) を config.txt に書いて&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kernel=rpi-micon.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SD にコピィして云々、なのか。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>collection of low level examples</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/15/collection-of-low-level-examples/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/15/collection-of-low-level-examples/</guid>
      <description>参考になりそうなリポジトリを発見。というかこれ、baremetal 本で OpenOCD 接続の設定ファイルの例、ということで紹介されていたものです。 dwelch67/raspberrypi 別途、</description>
    </item>
    
    <item>
      <title>bare-metal 着手</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/13/bare-metal/</link>
      <pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/13/bare-metal/</guid>
      <description>&lt;p&gt;根性無くって #gFab に行けず、フテていても仕方がないので諸々着手。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.osdev.org/ARM_RaspberryPi_Tutorial_C&#34;&gt;ARM RaspberryPi Tutorial C&lt;/a&gt; からファイルを作って make してみると以下な出力が。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;arm-unknown-eabi-gcc: error: fomit-frame-pointer: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これ、Makefile に以下な記述があるのが原因らしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Makefile:BASEFLAGS   += -ffreestanding fomit-frame-pointer -mcpu=arm1176jzf-s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あら、これってもしかして &amp;ldquo;-&amp;rdquo; が無いだけかな。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BeareMetal で遊ぶ</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/10/playing-with-baremetal/</link>
      <pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/10/playing-with-baremetal/</guid>
      <description>&lt;p&gt;色々確認を。とりあえず &lt;a href=&#34;http://wiki.osdev.org&#34;&gt;OSDev.org&lt;/a&gt; あたりのドキュメントから確認入れるなど。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.osdev.org/ARM_RaspberryPi&#34;&gt;ARM RaspberryPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.osdev.org/ARM_RaspberryPi_Tutorial_C&#34;&gt;ARM RaspberryPi Tutorial C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;備忘まで以前見つけてたドキュメントが以下なあたり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/index.html&#34;&gt;Baking Pi – Operating Systems Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;www.raspberrypi.org/wp-content/.../BCM2835-ARM-Peripherals.pdf‎&#34;&gt;BCM2835-ARM-Peripherals.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にもあった気がしてるんですが忘れた。とりあえず &lt;a href=&#34;http://wiki.osdev.org&#34;&gt;OSDev.org&lt;/a&gt; のソレを確認しつつ &lt;a href=&#34;http://tatsu-zine.com/books/raspi-bm&#34;&gt;BareMetal で遊ぶ Raspberry Pi&lt;/a&gt; も見つつ、という事にて。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ベアメタルなネタについて</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/04/08/bare-metal-in-raspberry-pi/</link>
      <pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/04/08/bare-metal-in-raspberry-pi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.mgwave.com&#34;&gt;mgwave&lt;/a&gt; すずきさんと某所にて情報交換など。&lt;/p&gt;

&lt;p&gt;UNIX v6 を Raspberry PI に移植、という作戦が展開されつつある模様。とりあえず達人出版会のアレを確認しつつ、プロジェクトの開始を虎視眈々と watch させて頂こうと思っておりますです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bourne Shell自習テキスト</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/03/28/bourne-shell-self-study-text/</link>
      <pubDate>Fri, 28 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/03/28/bourne-shell-self-study-text/</guid>
      <description>Linux/bash 向けに書き直して markdown にして GitHub に、ってヤッちゃって良いのかどうか。とりあえずソースは入手したので明日の移動で云々な方向。これだと回線不要だし。</description>
    </item>
    
    <item>
      <title>教養としてのプログラミング講座</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/03/10/programming-course-as-a-liberal-arts/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/03/10/programming-course-as-a-liberal-arts/</guid>
      <description>む。これ買って身近なヒトと云々して試行錯誤してみる方向。とりあえず購入してどうするかを検討してみます。</description>
    </item>
    
    <item>
      <title>プロミスキャスモードな socket プログラム</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2014/01/16/program-like-wireshark/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2014/01/16/program-like-wireshark/</guid>
      <description>&lt;p&gt;とりあえずリモホに接続できるので Linux な man ができる、ということで (何&lt;/p&gt;

&lt;p&gt;接続確立な初期処理では以下な手順を踏んでいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;socket 手続き呼び出し&lt;/li&gt;
&lt;li&gt;ifrec 構造体の初期化&lt;/li&gt;
&lt;li&gt;ifrec 構造体にデバイスな文字列設定&lt;/li&gt;
&lt;li&gt;ioctl に socket なデバイス番号と SIOCGIFINDEX と ifrec を渡して呼び出し&lt;/li&gt;
&lt;li&gt;sockaddr_ll 構造体メンバの設定&lt;/li&gt;
&lt;li&gt;bind&lt;/li&gt;
&lt;li&gt;プロミスキャスモードの設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたり、おもしろそうなので確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近世話になってる十年以上の友</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/12/14/ansi-c-language-dictionary/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/12/14/ansi-c-language-dictionary/</guid>
      <description>ANSI C 言語辞典。復帰の折に購入したのですが平成 9 年ていつだろ。 本の扱いは昔から非道でこの本はかなり使い込んでもいたのでもうぼろぼろなんですがい</description>
    </item>
    
    <item>
      <title>make で云々</title>
      <link>https://weblog.metacircular-evaluator.org/blog/2013/11/22/make-makefile/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://weblog.metacircular-evaluator.org/blog/2013/11/22/make-makefile/</guid>
      <description>あるスクリプトが出力するファイルにあるコマンドが依存している場合、どのように Makefile を書くべきか、なお題。しかもよくよく見てみるに、あるスクリプト</description>
    </item>
    
  </channel>
</rss>